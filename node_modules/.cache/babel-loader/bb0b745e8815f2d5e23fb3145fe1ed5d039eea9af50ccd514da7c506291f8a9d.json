{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentence, setAvailableSentence] = useState(formData);\n  const [message, setMessage] = useState(\"\");\n  // const [isTranslationShown, setIsTranslationShown] = useState(false)\n\n  // const getRandomSentence = useCallback(() => {\n  //     if (availableSentence.length === 0) {\n  //         setMessage(\"You checked all the sentences\")\n  //     } else if (formData && formData.length > 0) {\n  //         const allSentences = formData.flatMap(word => word.sentences)\n  //         const randomIndex = Math.floor(Math.random() * allSentences.length);\n  //         const selectedSentence = allSentences[randomIndex]\n  //         setRandomSentence(selectedSentence.translation)\n  //         setRandomTranslation(selectedSentence.sentence)\n  //         setShowTranslation(false)\n  //     } else {\n  //         console.error('formData is undefined or empty')\n  //     }\n  // }, [formData])\n\n  const getRandomSentence = () => {\n    if (availableSentence.length === 0) {\n      setMessage(\"You checked all the sentences\");\n      return;\n    }\n    const allSentences = formData.flatMap(word => word.sentences);\n    const randomIndex = Math.floor(Math.random() * allSentences.length);\n    const phrase = allSentences[randomIndex];\n    setRandomSentence(phrase.translation);\n    setRandomTranslation(phrase.sentence);\n    setShowTranslation(false);\n    setRandomSentence(phrase);\n    const handleShowTranslation = () => {\n      setShowTranslation(true);\n    };\n    const newAvailablePhrase = allSentences.filter((item, index) => index !== randomIndex);\n    setAvailableSentence(newAvailablePhrase);\n\n    // useEffect(() => {\n    //     getRandomSentence()\n    // }, [formData, getRandomSentence])\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: startDictation.startDictation,\n      children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 32\n      }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: startDictation.startDictation__translation,\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: startDictation.startDictation__buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTranslation,\n          className: startDictation.startDictation__showTranslation,\n          children: \"Show translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRandomSentence,\n          className: startDictation.startDictation__nextSentence,\n          children: \"Next sentence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  };\n};\n_s(StartDictation, \"cfkiO0v+x6KxGPmZtl8tJy6XN/k=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","useCallback","startDictation","jsxDEV","_jsxDEV","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentence","setAvailableSentence","message","setMessage","getRandomSentence","length","allSentences","flatMap","word","sentences","randomIndex","Math","floor","random","phrase","translation","sentence","handleShowTranslation","newAvailablePhrase","filter","item","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startDictation__translation","startDictation__buttons","onClick","startDictation__showTranslation","startDictation__nextSentence","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport startDictation from './StartDictation.module.css'\r\n\r\nconst StartDictation = ({ formData }) => {\r\n\r\n    const [randomTranslation, setRandomTranslation] = useState('')\r\n    const [randomSentence, setRandomSentence] = useState('')\r\n    const [showTranslation, setShowTranslation] = useState(false)\r\n    const [availableSentence, setAvailableSentence] = useState(formData)\r\n    const [message, setMessage] = useState(\"\");\r\n    // const [isTranslationShown, setIsTranslationShown] = useState(false)\r\n\r\n    // const getRandomSentence = useCallback(() => {\r\n    //     if (availableSentence.length === 0) {\r\n    //         setMessage(\"You checked all the sentences\")\r\n    //     } else if (formData && formData.length > 0) {\r\n    //         const allSentences = formData.flatMap(word => word.sentences)\r\n    //         const randomIndex = Math.floor(Math.random() * allSentences.length);\r\n    //         const selectedSentence = allSentences[randomIndex]\r\n    //         setRandomSentence(selectedSentence.translation)\r\n    //         setRandomTranslation(selectedSentence.sentence)\r\n    //         setShowTranslation(false)\r\n    //     } else {\r\n    //         console.error('formData is undefined or empty')\r\n    //     }\r\n    // }, [formData])\r\n\r\n    const getRandomSentence = () => {\r\n        if (availableSentence.length === 0) {\r\n            setMessage(\"You checked all the sentences\")\r\n            return;\r\n    }\r\n\r\n    const allSentences = formData.flatMap(word => word.sentences)\r\n    const randomIndex = Math.floor(Math.random() * allSentences.length);\r\n    const phrase = allSentences[randomIndex]\r\n    setRandomSentence(phrase.translation)\r\n    setRandomTranslation(phrase.sentence)\r\n    setShowTranslation(false)\r\n\r\n    setRandomSentence(phrase)\r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true)\r\n    }\r\n\r\n    const newAvailablePhrase = allSentences.filter(\r\n        (item, index) => index !== randomIndex\r\n    );\r\n    setAvailableSentence(newAvailablePhrase)\r\n\r\n    // useEffect(() => {\r\n    //     getRandomSentence()\r\n    // }, [formData, getRandomSentence])\r\n\r\n    return(\r\n        <div className={startDictation.startDictation}>\r\n            {randomSentence && <p>{randomSentence}</p>}\r\n            {showTranslation && <p className={startDictation.startDictation__translation}>{randomTranslation}</p>}\r\n            <div className={startDictation.startDictation__buttons}>\r\n                <button onClick={handleShowTranslation} className={startDictation.startDictation__showTranslation}>Show translation</button>\r\n                <button onClick={getRandomSentence} className={startDictation.startDictation__nextSentence}>Next sentence</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}}\r\n\r\nexport default StartDictation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}