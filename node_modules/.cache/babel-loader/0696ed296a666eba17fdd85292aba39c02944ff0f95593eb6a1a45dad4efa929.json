{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [fieldEmpty, setFieldEmpty] = useState(\"Field can't be empty\");\n  const [fieldDirty, setFieldDirty] = useState(false);\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    if (fieldEmpty) {\n      setFormValid(false);\n    } else {\n      setFormValid(true);\n    }\n  }, [fieldEmpty]);\n  function handleChange(event) {\n    const {\n      name,\n      value,\n      type\n    } = event.target;\n    setFormData(prevFormData => ({\n      ...prevFormData\n    }));\n  }\n  function handleInput(event) {\n    event.preventDefault();\n    if (formData.word === '') {\n      setFieldEmpty(\"Field can't be empty\");\n    } else setFieldEmpty('');\n  }\n  const blurHandler = e => {\n    switch (e.target.name) {\n      case 'word':\n        setFieldDirty(true);\n        break;\n      case 'sentence':\n        setFieldDirty(true);\n        break;\n      case 'translation':\n        setFieldDirty(true);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleChange,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 56\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleChange,\n            name: \"sentence\",\n            type: \"text\",\n            placeholder: \"sentence with word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 56\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleChange,\n            name: \"translation\",\n            type: \"text\",\n            placeholder: \"sentence translation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 56\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"GmUT+7LnVse8T4leYCRRShFVJ0M=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","jsxDEV","_jsxDEV","MyWordsPopup","_s","formData","setFormData","word","sentences","sentence","translation","fieldEmpty","setFieldEmpty","fieldDirty","setFieldDirty","formValid","setFormValid","handleChange","event","name","value","type","target","prevFormData","handleInput","preventDefault","blurHandler","e","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__inputs","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","mywordspopup__buttons","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css'\r\n\r\nconst MyWordsPopup = () => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [\r\n            {\r\n                sentence: '',\r\n                translation: ''\r\n            }\r\n        ]\r\n    })\r\n\r\n    const [fieldEmpty, setFieldEmpty] = useState(\"Field can't be empty\");\r\n    const [fieldDirty, setFieldDirty] = useState(false)\r\n    const [formValid, setFormValid] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (fieldEmpty) {\r\n            setFormValid(false)\r\n        }else {\r\n            setFormValid(true)\r\n        }\r\n    }, [fieldEmpty])\r\n\r\n    function handleChange(event) {\r\n        const {name, value, type} = event.target;\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n        }))\r\n    }\r\n\r\n    function handleInput(event) {\r\n        event.preventDefault();\r\n        if (formData.word === '') {\r\n            setFieldEmpty(\"Field can't be empty\")\r\n        } else (\r\n            setFieldEmpty('')\r\n        )\r\n    }\r\n\r\n    const blurHandler = (e) => {\r\n        switch (e.target.name) {\r\n            case 'word':\r\n                setFieldDirty(true)\r\n                break\r\n            case 'sentence':\r\n                setFieldDirty(true)\r\n                break\r\n            case 'translation':\r\n                setFieldDirty(true)\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input onChange={handleChange} name='word' type='text' placeholder='word'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                        <input onChange={handleChange} name='sentence' type='text' placeholder='sentence with word'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                        <input onChange={handleChange} name='translation' type='text' placeholder='sentence translation'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button>add one more sentence</button>\r\n                        <button>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyWordsPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}