{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\EditPopup\\\\EditPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport editPopup from './EditPopup.module.css';\nimport close from './../../../../../images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  formData,\n  onClose,\n  addField,\n  handleInput,\n  removeField,\n  index,\n  handlePublish,\n  setShowEditPopup\n}) => {\n  _s();\n  const [localFormData, setLocalFormData] = useState({\n    ...formData\n  });\n  const [sentenceErrors, setSentenceErrors] = useState([]);\n  const [translationErrors, setTranslationErrors] = useState([]);\n  const [editFormValid, setEditFormValid] = useState(false);\n  const [wordErrors, setWordErrors] = useState('');\n  const [showChanges, setShowChanges] = useState(false);\n  useEffect(() => {\n    validateForm();\n  }, [localFormData]);\n  useEffect(() => {\n    setLocalFormData({\n      ...formData\n    });\n  }, [formData]);\n  const validateForm = () => {\n    const newSentenceErrors = [];\n    const newTranslationErrors = [];\n    const newWordErrors = [];\n    localFormData.sentences.forEach((sentence, i) => {\n      if (!sentence.sentence) {\n        newSentenceErrors[i] = \"Sentence field can't be empty\";\n      } else {\n        newSentenceErrors[i] = \"\";\n      }\n      if (!sentence.translation) {\n        newTranslationErrors[i] = \"Translation field can't be empty\";\n      } else {\n        newTranslationErrors[i] = \"\";\n      }\n    });\n    if (!localFormData.word) {\n      newWordErrors[0] = \"Word field can't be empty\";\n    } else {\n      newWordErrors[0] = \"\";\n    }\n    setSentenceErrors(newSentenceErrors);\n    setTranslationErrors(newTranslationErrors);\n    setWordErrors(newWordErrors);\n    const isFormValid = newSentenceErrors.every(err => !err) && newTranslationErrors.every(err => !err) && newWordErrors.every(err => !err);\n    setEditFormValid(isFormValid);\n  };\n\n  // const handleLocalInput = (e, index, field) => {\n  //     const { value } = e.target;\n  //     setLocalFormData(prevData => {\n  //         const updatedData = { ...prevData };\n  //         if (field === 'word') {\n  //             updatedData.word = value;\n  //         } else {\n  //             const [fieldType, idx] = field.split('-');\n  //             updatedData.sentences[idx][fieldType] = value;\n  //         }\n  //         return updatedData;\n  //     });\n  // };\n\n  const handleLocalInput = (index, field, value) => {\n    const updatedData = [...sentences];\n    newSentences[index][field] = value;\n    setLocalFormData(newSentences);\n  };\n\n  // const closeWithoutSaving = () => {\n  //     setShowChanges(false);\n  // };\n\n  const handlePublishInEdit = () => {\n    handleInput({\n      target: {\n        value: localFormData.word\n      }\n    }, index, 'word');\n    localFormData.sentences.forEach((sentence, i) => {\n      handleInput({\n        target: {\n          value: sentence.sentence\n        }\n      }, index, `sentence-${i}`);\n      handleInput({\n        target: {\n          value: sentence.translation\n        }\n      }, index, `translation-${i}`);\n    });\n    handlePublish();\n  };\n  const handleCloseWithoutSaving = () => {\n    setShowEditPopup(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: editPopup.editPopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: editPopup.editPopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: editPopup.editPopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: editPopup.editPopup__content_close,\n          onClick: handleCloseWithoutSaving,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => handleLocalInput(e, index, 'word'),\n            type: \"text\",\n            placeholder: \"word\",\n            value: localFormData.word,\n            className: editPopup.editPopup__input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), wordErrors[0] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: editPopup.editPopup__error,\n            children: wordErrors[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 43\n          }, this), localFormData.sentences.map((sentence, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: editPopup.editPopup__sentenceContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: editPopup.editPopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleLocalInput(e, index, `sentence-${i}`),\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence,\n                className: editPopup.editPopup__input\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 37\n              }, this), sentenceErrors[i] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: editPopup.editPopup__error,\n                children: sentenceErrors[i]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 59\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleLocalInput(e, index, `translation-${i}`),\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation,\n                className: editPopup.editPopup__input\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this), translationErrors[i] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: editPopup.editPopup__error,\n                children: translationErrors[i]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 62\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), localFormData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: editPopup.editPopup__removeField,\n              onClick: () => removeField(i),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            className: editPopup.editPopup__addButton,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePublishInEdit,\n            disabled: !editFormValid,\n            className: editPopup.editPopup__doneButton,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(EditPopup, \"DloxCApr/GqWrSbwXoHJRAR30W0=\");\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["useState","useEffect","editPopup","close","jsxDEV","_jsxDEV","EditPopup","formData","onClose","addField","handleInput","removeField","index","handlePublish","setShowEditPopup","_s","localFormData","setLocalFormData","sentenceErrors","setSentenceErrors","translationErrors","setTranslationErrors","editFormValid","setEditFormValid","wordErrors","setWordErrors","showChanges","setShowChanges","validateForm","newSentenceErrors","newTranslationErrors","newWordErrors","sentences","forEach","sentence","i","translation","word","isFormValid","every","err","handleLocalInput","field","value","updatedData","newSentences","handlePublishInEdit","target","handleCloseWithoutSaving","className","children","editPopup__wrapper","editPopup__content","editPopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","editPopup__inputs","onChange","e","type","placeholder","editPopup__input","editPopup__error","map","editPopup__sentenceContainer","editPopup__inputs_repeated","length","editPopup__removeField","editPopup__buttons","editPopup__addButton","disabled","editPopup__doneButton","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/EditPopup/EditPopup.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport editPopup from './EditPopup.module.css';\r\nimport close from './../../../../../images/close.png';\r\n\r\nconst EditPopup = ({ formData, onClose, addField, handleInput, removeField, index, handlePublish, setShowEditPopup }) => {\r\n    const [localFormData, setLocalFormData] = useState({ ...formData });\r\n    const [sentenceErrors, setSentenceErrors] = useState([]);\r\n    const [translationErrors, setTranslationErrors] = useState([]);\r\n    const [editFormValid, setEditFormValid] = useState(false);\r\n    const [wordErrors, setWordErrors] = useState('');\r\n    const [showChanges, setShowChanges] = useState(false);\r\n\r\n    useEffect(() => {\r\n        validateForm();\r\n    }, [localFormData]);\r\n\r\n    useEffect(() => {\r\n        setLocalFormData({ ...formData });\r\n    }, [formData]);\r\n\r\n    const validateForm = () => {\r\n        const newSentenceErrors = [];\r\n        const newTranslationErrors = [];\r\n        const newWordErrors = [];\r\n\r\n        localFormData.sentences.forEach((sentence, i) => {\r\n            if (!sentence.sentence) {\r\n                newSentenceErrors[i] = \"Sentence field can't be empty\";\r\n            } else {\r\n                newSentenceErrors[i] = \"\";\r\n            }\r\n            if (!sentence.translation) {\r\n                newTranslationErrors[i] = \"Translation field can't be empty\";\r\n            } else {\r\n                newTranslationErrors[i] = \"\";\r\n            }\r\n        });\r\n\r\n        if (!localFormData.word) {\r\n            newWordErrors[0] = \"Word field can't be empty\";\r\n        } else {\r\n            newWordErrors[0] = \"\";\r\n        }\r\n\r\n        setSentenceErrors(newSentenceErrors);\r\n        setTranslationErrors(newTranslationErrors);\r\n        setWordErrors(newWordErrors);\r\n\r\n        const isFormValid = newSentenceErrors.every(err => !err) && newTranslationErrors.every(err => !err) && newWordErrors.every(err => !err);\r\n        setEditFormValid(isFormValid);\r\n    };\r\n\r\n    // const handleLocalInput = (e, index, field) => {\r\n    //     const { value } = e.target;\r\n    //     setLocalFormData(prevData => {\r\n    //         const updatedData = { ...prevData };\r\n    //         if (field === 'word') {\r\n    //             updatedData.word = value;\r\n    //         } else {\r\n    //             const [fieldType, idx] = field.split('-');\r\n    //             updatedData.sentences[idx][fieldType] = value;\r\n    //         }\r\n    //         return updatedData;\r\n    //     });\r\n    // };\r\n\r\n    const handleLocalInput = (index, field, value) => {\r\n        const updatedData = [...sentences];\r\n        newSentences[index][field] = value;\r\n        setLocalFormData(newSentences);\r\n    };\r\n\r\n    // const closeWithoutSaving = () => {\r\n    //     setShowChanges(false);\r\n    // };\r\n\r\n    const handlePublishInEdit = () => {\r\n        handleInput({ target: { value: localFormData.word } }, index, 'word');\r\n        localFormData.sentences.forEach((sentence, i) => {\r\n            handleInput({ target: { value: sentence.sentence } }, index, `sentence-${i}`);\r\n            handleInput({ target: { value: sentence.translation } }, index, `translation-${i}`);\r\n        });\r\n        handlePublish();\r\n    };\r\n\r\n    const handleCloseWithoutSaving = () => {\r\n        setShowEditPopup(false);\r\n    };\r\n\r\n    return (\r\n        <div className={editPopup.editPopup}>\r\n            <div className={editPopup.editPopup__wrapper}>\r\n                <div className={editPopup.editPopup__content}>\r\n                    <button className={editPopup.editPopup__content_close} onClick={handleCloseWithoutSaving}>\r\n                        <img src={close} alt='Close' />\r\n                    </button>\r\n                    <div className={editPopup.editPopup__inputs}>\r\n                        <input\r\n                            onChange={(e) => handleLocalInput(e, index, 'word')}\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={localFormData.word}\r\n                            className={editPopup.editPopup__input}\r\n                        />\r\n                        {wordErrors[0] && <div className={editPopup.editPopup__error}>{wordErrors[0]}</div>}\r\n                        {localFormData.sentences.map((sentence, i) => (\r\n                            <div key={i} className={editPopup.editPopup__sentenceContainer}>\r\n                                <div className={editPopup.editPopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={(e) => handleLocalInput(e, index, `sentence-${i}`)}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        className={editPopup.editPopup__input}\r\n                                    />\r\n                                    {sentenceErrors[i] && <div className={editPopup.editPopup__error}>{sentenceErrors[i]}</div>}\r\n                                    <input\r\n                                        onChange={(e) => handleLocalInput(e, index, `translation-${i}`)}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        className={editPopup.editPopup__input}\r\n                                    />\r\n                                    {translationErrors[i] && <div className={editPopup.editPopup__error}>{translationErrors[i]}</div>}\r\n                                </div>\r\n                                {localFormData.sentences.length > 1 && (\r\n                                    <span\r\n                                        className={editPopup.editPopup__removeField}\r\n                                        onClick={() => removeField(i)}\r\n                                    >\r\n                                        –\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={editPopup.editPopup__buttons}>\r\n                        <button onClick={addField} className={editPopup.editPopup__addButton}>add one more sentence</button>\r\n                        <button onClick={handlePublishInEdit} disabled={!editFormValid} className={editPopup.editPopup__doneButton}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditPopup;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}