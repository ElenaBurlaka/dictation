{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = ({\n  onClose\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [name]: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      const updatedSentences = [...formData.sentences];\n      updatedSentences[index][fieldName] = value;\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: updatedSentences\n      }));\n      const updatedErrors = [...errors.sentences];\n      updatedErrors[index][fieldName] = value ? '' : \"Field can't be empty\";\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: updatedErrors\n      }));\n    }\n    console.log('formData:', formData);\n    console.log('errors:', errors);\n  };\n  const blurHandler = e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        [name]: true\n      }));\n    } else {\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      const updatedDirtyFields = [...dirtyFields.sentences];\n      updatedDirtyFields[index][fieldName] = true;\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: updatedDirtyFields\n      }));\n    }\n  };\n  const addField = () => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  };\n  const removeField = index => {\n    if (formData.sentences.length > 1) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInput,\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this), formData.sentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: mywordspopup.mywordspopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `sentence-${index}`,\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence,\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `translation-${index}`,\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation,\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].translation && errors.sentences[index].translation && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].translation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginLeft: '10px'\n              },\n              onClick: () => removeField(index),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"xS4j7Rew6AVgUQnkrtiueYuCDEI=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","jsxDEV","_jsxDEV","MyWordsPopup","onClose","_s","formData","setFormData","word","sentences","sentence","translation","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","some","e","handleInput","name","value","target","prevFormData","prevErrors","index","parseInt","dataset","fieldName","split","updatedSentences","updatedErrors","console","log","blurHandler","prevDirtyFields","updatedDirtyFields","addField","removeField","length","filter","_","i","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__inputs","onChange","onBlur","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","map","display","mywordspopup__inputs_repeated","cursor","marginLeft","onClick","mywordspopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\n\r\nconst MyWordsPopup = ({ onClose }) => {\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [\r\n            {\r\n                sentence: '',\r\n                translation: ''\r\n            }\r\n        ]\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    });\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    });\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [errors]);\r\n\r\n    const handleInput = (e) => {\r\n        const { name, value } = e.target;\r\n        if (name === 'word') {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                [name]: value\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                [name]: value ? '' : \"Field can't be empty\"\r\n            }));\r\n        } else {\r\n            const index = parseInt(e.target.dataset.index, 10);\r\n            const fieldName = name.split('-')[1];\r\n            const updatedSentences = [...formData.sentences];\r\n            updatedSentences[index][fieldName] = value;\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: updatedSentences\r\n            }));\r\n            const updatedErrors = [...errors.sentences];\r\n            updatedErrors[index][fieldName] = value ? '' : \"Field can't be empty\";\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: updatedErrors\r\n            }));\r\n        }\r\n        console.log('formData:', formData);\r\n        console.log('errors:', errors);\r\n    };\r\n\r\n    const blurHandler = (e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                [name]: true\r\n            }));\r\n        } else {\r\n            const index = parseInt(e.target.dataset.index, 10);\r\n            const fieldName = name.split('-')[1];\r\n            const updatedDirtyFields = [...dirtyFields.sentences];\r\n            updatedDirtyFields[index][fieldName] = true;\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: updatedDirtyFields\r\n            }));\r\n        }\r\n    };\r\n\r\n    const addField = () => {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    };\r\n\r\n    const removeField = (index) => {\r\n        if (formData.sentences.length > 1) {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            onChange={handleInput}\r\n                            onBlur={blurHandler}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={formData.word}\r\n                        />\r\n                        {dirtyFields.word && errors.word && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n                        )}\r\n                        {formData.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n                                    )}\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index].translation && errors.sentences[index].translation && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n                                    )}\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button disabled={!formValid}>done</button>\r\n                        <button onClick={onClose}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWordsPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}