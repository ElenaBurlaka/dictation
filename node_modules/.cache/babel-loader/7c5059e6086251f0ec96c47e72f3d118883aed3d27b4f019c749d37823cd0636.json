{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\Dictation.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport dictation from './Dictation.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dictation = () => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const getRandomTranslation = () => {\n    if (formData && formData.length > 0) {\n      const allSentences = formData.flatMap(word => word.sentences);\n      const randomIndex = Math.floor(Math.random() * allSentences.length);\n      setRandomTranslation(allSentences[randomIndex].translation);\n    } else {\n      console.error('formData is undefined or empty');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: dictation.dictation,\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/startDictation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getRandomTranslation,\n        children: \"Start dictation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 43\n      }, this), randomTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/customize\",\n      children: \"Customize dictation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/customize\",\n      children: \"Verb dictation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(Dictation, \"36n3VVkjruMF5NXGnBF76Mp//6A=\");\n_c = Dictation;\nexport default Dictation;\nvar _c;\n$RefreshReg$(_c, \"Dictation\");","map":{"version":3,"names":["useState","dictation","NavLink","jsxDEV","_jsxDEV","Dictation","_s","randomTranslation","setRandomTranslation","getRandomTranslation","formData","length","allSentences","flatMap","word","sentences","randomIndex","Math","floor","random","translation","console","error","className","children","to","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/Dictation.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport dictation from './Dictation.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Dictation = () => {\r\n\r\n    const [randomTranslation, setRandomTranslation] = useState('')\r\n\r\n    const getRandomTranslation = () => {\r\n        if (formData && formData.length > 0) {\r\n            const allSentences = formData.flatMap(word => word.sentences)\r\n            const randomIndex = Math.floor(Math.random() * allSentences.length);\r\n            setRandomTranslation(allSentences[randomIndex].translation)\r\n        } else {\r\n            console.error('formData is undefined or empty')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={dictation.dictation}>\r\n            <NavLink to='/startDictation'><button onClick={getRandomTranslation}>Start dictation</button>\r\n            {randomTranslation && <p>{randomTranslation}</p>}</NavLink>\r\n            \r\n            <NavLink to='/customize'>Customize dictation</NavLink>\r\n            <NavLink to='/customize'>Verb dictation</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dictation;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,OAAO,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9D,MAAMS,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMC,YAAY,GAAGF,QAAQ,CAACG,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC;MAC7D,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,YAAY,CAACD,MAAM,CAAC;MACnEH,oBAAoB,CAACI,YAAY,CAACI,WAAW,CAAC,CAACI,WAAW,CAAC;IAC/D,CAAC,MAAM;MACHC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAKmB,SAAS,EAAEtB,SAAS,CAACA,SAAU;IAAAuB,QAAA,gBAChCpB,OAAA,CAACF,OAAO;MAACuB,EAAE,EAAC,iBAAiB;MAAAD,QAAA,gBAACpB,OAAA;QAAQsB,OAAO,EAAEjB,oBAAqB;QAAAe,QAAA,EAAC;MAAe;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC5FvB,iBAAiB,iBAAIH,OAAA;QAAAoB,QAAA,EAAIjB;MAAiB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC,eAE3D1B,OAAA,CAACF,OAAO;MAACuB,EAAE,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAmB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACtD1B,OAAA,CAACF,OAAO;MAACuB,EAAE,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd,CAAC;AAAAxB,EAAA,CAvBKD,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAyBf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}