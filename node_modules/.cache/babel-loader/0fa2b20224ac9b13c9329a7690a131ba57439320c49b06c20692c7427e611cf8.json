{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = ({\n  onClose\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  useEffect(() => {\n    console.log('Updated formData:', formData);\n  }, [formData]);\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      // Обновление для поля 'word'\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [name]: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      // Обновление для поля 'sentence'\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      setFormData(prevFormData => {\n        const updatedSentences = prevFormData.sentences.map((sentence, idx) => {\n          if (idx === index) {\n            return {\n              ...sentence,\n              [fieldName]: value\n            };\n          }\n          return sentence;\n        });\n        return {\n          ...prevFormData,\n          sentences: updatedSentences\n        };\n      });\n      setErrors(prevErrors => {\n        const updatedErrors = prevErrors.sentences.map((error, idx) => {\n          if (idx === index) {\n            return {\n              ...error,\n              [fieldName]: value ? '' : \"Field can't be empty\"\n            };\n          }\n          return error;\n        });\n        return {\n          ...prevErrors,\n          sentences: updatedErrors\n        };\n      });\n    }\n  };\n  const blurHandler = e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        [name]: true\n      }));\n    } else {\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      setDirtyFields(prevDirtyFields => {\n        const updatedDirtyFields = [...prevDirtyFields.sentences];\n        updatedDirtyFields[index][fieldName] = true;\n        return {\n          ...prevDirtyFields,\n          sentences: updatedDirtyFields\n        };\n      });\n    }\n  };\n  const addField = () => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  };\n  const removeField = index => {\n    if (formData.sentences.length > 1) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInput,\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this), formData.sentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: mywordspopup.mywordspopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `sentence-${index}`,\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence,\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `translation-${index}`,\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation,\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].translation && errors.sentences[index].translation && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].translation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 33\n            }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginLeft: '10px'\n              },\n              onClick: () => removeField(index),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"i8g0bp3bpXxrboH89pAj3iEQaAA=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","jsxDEV","_jsxDEV","MyWordsPopup","onClose","_s","formData","setFormData","word","sentences","sentence","translation","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","some","e","console","log","handleInput","name","value","target","prevFormData","prevErrors","index","parseInt","dataset","fieldName","split","updatedSentences","map","idx","updatedErrors","error","blurHandler","prevDirtyFields","updatedDirtyFields","addField","removeField","length","filter","_","i","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__inputs","onChange","onBlur","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","display","mywordspopup__inputs_repeated","cursor","marginLeft","onClick","mywordspopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\n\r\nconst MyWordsPopup = ({ onClose }) => {\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [\r\n            {\r\n                sentence: '',\r\n                translation: ''\r\n            }\r\n        ]\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    });\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    });\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [errors]);\r\n\r\n    useEffect(() => {\r\n        console.log('Updated formData:', formData);\r\n    }, [formData]);\r\n\r\n    const handleInput = (e) => {\r\n        const { name, value } = e.target;\r\n        if (name === 'word') {\r\n            // Обновление для поля 'word'\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                [name]: value\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                [name]: value ? '' : \"Field can't be empty\"\r\n            }));\r\n        } else {\r\n            // Обновление для поля 'sentence'\r\n            const index = parseInt(e.target.dataset.index, 10);\r\n            const fieldName = name.split('-')[1];\r\n            setFormData(prevFormData => {\r\n                const updatedSentences = prevFormData.sentences.map((sentence, idx) => {\r\n                    if (idx === index) {\r\n                        return { ...sentence, [fieldName]: value };\r\n                    }\r\n                    return sentence;\r\n                });\r\n                return { ...prevFormData, sentences: updatedSentences };\r\n            });\r\n            setErrors(prevErrors => {\r\n                const updatedErrors = prevErrors.sentences.map((error, idx) => {\r\n                    if (idx === index) {\r\n                        return { ...error, [fieldName]: value ? '' : \"Field can't be empty\" };\r\n                    }\r\n                    return error;\r\n                });\r\n                return { ...prevErrors, sentences: updatedErrors };\r\n            });\r\n        }\r\n    };\r\n\r\n    const blurHandler = (e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                [name]: true\r\n            }));\r\n        } else {\r\n            const index = parseInt(e.target.dataset.index, 10);\r\n            const fieldName = name.split('-')[1];\r\n            setDirtyFields(prevDirtyFields => {\r\n                const updatedDirtyFields = [...prevDirtyFields.sentences];\r\n                updatedDirtyFields[index][fieldName] = true;\r\n                return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n            });\r\n        }\r\n    };\r\n\r\n    const addField = () => {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    };\r\n\r\n    const removeField = (index) => {\r\n        if (formData.sentences.length > 1) {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            onChange={handleInput}\r\n                            onBlur={blurHandler}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={formData.word}\r\n                        />\r\n                        {dirtyFields.word && errors.word && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n                        )}\r\n                        {formData.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n                                    )}\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index].translation && errors.sentences[index].translation && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n                                    )}\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button disabled={!formValid}>done</button>\r\n                        <button onClick={onClose}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWordsPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}