{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\n  // const [currentIndex, setCurrentIndex] = useState(0);\n  const [usedIndices, setUsedIndices] = useState([]);\n  const [message, setMessage] = useState('');\n  const getRandomSentence = () => {\n    if (usedIndices.length >= availableSentences.length) {\n      setMessage('You checked all the sentences');\n      setRandomSentence('');\n      setRandomTranslation('');\n      return;\n    }\n    let randomIndex;\n    do {\n      randomIndex = Math.floor(Math.random() * availableSentences.length);\n    } while (usedIndices.includes(randomIndex));\n    setUsedIndices(prev => [...prev, randomIndex]);\n    const selectedSentence = availableSentences[randomIndex];\n    setRandomSentence(selectedSentence.sentence);\n    setRandomTranslation(selectedSentence.translation);\n    setShowTranslation(false);\n    setMessage('');\n  };\n  useEffect(() => {\n    getRandomSentence();\n  }, []);\n  const handleShowTranslation = () => {\n    setShowTranslation(true);\n  };\n  const startOver = () => {\n    setUsedIndices([]); // Сбрасываем использованные индексы\n    setMessage(''); // Сбрасываем сообщение\n    setRandomSentence(''); // Убираем текущее предложение\n    setRandomTranslation(''); // Убираем текущий перевод\n    setShowTranslation(false);\n    const randomIndex = Math.floor(Math.random() * availableSentences.length);\n    setUsedIndices([randomIndex]); // Добавляем первый случайный индекс\n    const selectedSentence = availableSentences[randomIndex];\n    setRandomSentence(selectedSentence.sentence);\n    setRandomTranslation(selectedSentence.translation);\n  };\n  const handleNextSentence = () => {\n    getRandomSentence();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: startDictation.startDictation,\n    children: message ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startOver,\n        className: startDictation.startDictation__startOver,\n        children: \"Start over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 40\n      }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: startDictation.startDictation__translation,\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: startDictation.startDictation__buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTranslation,\n          className: startDictation.startDictation__showTranslation,\n          children: \"Show translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextSentence,\n          className: startDictation.startDictation__nextSentence,\n          children: \"Next sentence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(StartDictation, \"0tWXAtW4XVehP7x8KmMHCX5kLko=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","startDictation","jsxDEV","_jsxDEV","Fragment","_Fragment","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentences","setAvailableSentences","flatMap","word","sentences","usedIndices","setUsedIndices","message","setMessage","getRandomSentence","length","randomIndex","Math","floor","random","includes","prev","selectedSentence","sentence","translation","handleShowTranslation","startOver","handleNextSentence","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","startDictation__startOver","startDictation__translation","startDictation__buttons","startDictation__showTranslation","startDictation__nextSentence","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport startDictation from './StartDictation.module.css';\r\n\r\nconst StartDictation = ({ formData }) => {\r\n    const [randomTranslation, setRandomTranslation] = useState('');\r\n    const [randomSentence, setRandomSentence] = useState('');\r\n    const [showTranslation, setShowTranslation] = useState(false);\r\n    const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\r\n    // const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [usedIndices, setUsedIndices] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const getRandomSentence = () => {\r\n        if (usedIndices.length >= availableSentences.length) {\r\n            setMessage('You checked all the sentences');\r\n            setRandomSentence('');\r\n            setRandomTranslation('');\r\n            return;\r\n        }\r\n\r\n        let randomIndex;\r\n        do {\r\n            randomIndex = Math.floor(Math.random() * availableSentences.length);\r\n        } while (usedIndices.includes(randomIndex));\r\n\r\n        setUsedIndices(prev => [...prev, randomIndex]);\r\n\r\n        const selectedSentence = availableSentences[randomIndex];\r\n        setRandomSentence(selectedSentence.sentence);\r\n        setRandomTranslation(selectedSentence.translation);\r\n        setShowTranslation(false);\r\n        setMessage('');\r\n    };\r\n\r\n    useEffect(() => {\r\n        getRandomSentence();\r\n    }, []); \r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true);\r\n    };\r\n\r\n    const startOver = () => {\r\n        setUsedIndices([]); // Сбрасываем использованные индексы\r\n        setMessage(''); // Сбрасываем сообщение\r\n        setRandomSentence(''); // Убираем текущее предложение\r\n        setRandomTranslation(''); // Убираем текущий перевод\r\n        setShowTranslation(false); \r\n            const randomIndex = Math.floor(Math.random() * availableSentences.length);\r\n            setUsedIndices([randomIndex]); // Добавляем первый случайный индекс\r\n            const selectedSentence = availableSentences[randomIndex];\r\n            setRandomSentence(selectedSentence.sentence);\r\n            setRandomTranslation(selectedSentence.translation);\r\n    };\r\n\r\n    const handleNextSentence = () => {\r\n        getRandomSentence();\r\n    };\r\n\r\n    return (\r\n        <div className={startDictation.startDictation}>\r\n            {message ? (\r\n                <>\r\n                    <p>{message}</p>\r\n                    <button\r\n                        onClick={startOver}\r\n                        className={startDictation.startDictation__startOver}\r\n                    >\r\n                        Start over\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {randomSentence && <p>{randomSentence}</p>}\r\n                    {showTranslation && (\r\n                        <p className={startDictation.startDictation__translation}>\r\n                            {randomTranslation}\r\n                        </p>\r\n                    )}\r\n                    <div className={startDictation.startDictation__buttons}>\r\n                        <button\r\n                            onClick={handleShowTranslation}\r\n                            className={startDictation.startDictation__showTranslation}\r\n                        >\r\n                            Show translation\r\n                        </button>\r\n                        <button\r\n                            onClick={handleNextSentence}\r\n                            className={startDictation.startDictation__nextSentence}\r\n                        >\r\n                            Next sentence\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartDictation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}