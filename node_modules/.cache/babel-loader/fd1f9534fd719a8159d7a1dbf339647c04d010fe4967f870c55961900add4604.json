{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\n  const [message, setMessage] = useState(\"\");\n  const getRandomSentence = () => {\n    if (availableSentences.length === 0) {\n      setMessage(\"You checked all the sentences\");\n      startOver();\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableSentences.length);\n    const selectedSentence = availableSentences[randomIndex];\n    setRandomSentence(selectedSentence.sentence);\n    setRandomTranslation(selectedSentence.translation);\n    setShowTranslation(false);\n    const newAvailableSentences = availableSentences.filter((item, index) => index !== randomIndex);\n    setAvailableSentences(newAvailableSentences);\n  };\n  const handleShowTranslation = () => {\n    setShowTranslation(true);\n  };\n  useEffect(() => {\n    getRandomSentence();\n  }, []);\n  const startOver = ({\n    getRandomSentence\n  }) => {\n    getRandomSentence();\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: startDictation.startDictation,\n    children: message ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 32\n      }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: startDictation.startDictation__translation,\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: startDictation.startDictation__buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTranslation,\n          className: startDictation.startDictation__showTranslation,\n          children: \"Show translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRandomSentence,\n          className: startDictation.startDictation__nextSentence,\n          children: \"Next sentence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), startOver({\n        getRandomSentence\n      }) && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startOver,\n        className: startDictation.startDictation__startOver,\n        children: \"Start over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(StartDictation, \"ynntLljcw8Qh31HIawh3Hm1KDYI=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","useCallback","startDictation","jsxDEV","_jsxDEV","Fragment","_Fragment","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentences","setAvailableSentences","flatMap","word","sentences","message","setMessage","getRandomSentence","length","startOver","randomIndex","Math","floor","random","selectedSentence","sentence","translation","newAvailableSentences","filter","item","index","handleShowTranslation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startDictation__translation","startDictation__buttons","onClick","startDictation__showTranslation","startDictation__nextSentence","startDictation__startOver","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport startDictation from './StartDictation.module.css'\r\n\r\nconst StartDictation = ({ formData }) => {\r\n\r\n    const [randomTranslation, setRandomTranslation] = useState('')\r\n    const [randomSentence, setRandomSentence] = useState('')\r\n    const [showTranslation, setShowTranslation] = useState(false)\r\n    const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences))\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const getRandomSentence = () => {\r\n        if (availableSentences.length === 0) {\r\n            setMessage(\"You checked all the sentences\")\r\n            startOver();\r\n            return;\r\n        }\r\n\r\n        const randomIndex = Math.floor(Math.random() * availableSentences.length);\r\n        const selectedSentence = availableSentences[randomIndex]\r\n\r\n        setRandomSentence(selectedSentence.sentence)\r\n        setRandomTranslation(selectedSentence.translation)\r\n        setShowTranslation(false)\r\n\r\n\r\n        const newAvailableSentences = availableSentences.filter(\r\n            (item, index) => index !== randomIndex\r\n        );\r\n        setAvailableSentences(newAvailableSentences)\r\n    }\r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRandomSentence()\r\n    }, [])\r\n\r\n    const startOver = ({getRandomSentence}) => {\r\n        getRandomSentence();\r\n        return;\r\n    }\r\n\r\n    return(\r\n        <div className={startDictation.startDictation}>\r\n            {message ? (<p>{message}</p>) : ( <>\r\n            {randomSentence && <p>{randomSentence}</p>}\r\n            {showTranslation && (<p className={startDictation.startDictation__translation}>{randomTranslation}</p>)}\r\n            <div className={startDictation.startDictation__buttons}>\r\n                <button onClick={handleShowTranslation} className={startDictation.startDictation__showTranslation}>Show translation</button>\r\n                <button onClick={getRandomSentence} className={startDictation.startDictation__nextSentence}>Next sentence</button>\r\n            </div>\r\n            {startOver({ getRandomSentence }) && (<button onClick={startOver} className={startDictation.startDictation__startOver}>Start over</button>)}\r\n            </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartDictation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}