{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const getRandomSentence = () => {\n    if (currentIndex >= availableSentences.length) {\n      setMessage(\"You checked all the sentences\");\n      return;\n    }\n    const selectedSentence = availableSentences[currentIndex];\n    setRandomSentence(selectedSentence.sentence);\n    setRandomTranslation(selectedSentence.translation);\n    setShowTranslation(false);\n    setCurrentIndex(prevIndex => prevIndex + 1); // Переход к следующему предложению\n  };\n  useEffect(() => {\n    getRandomSentence();\n  }, [availableSentences]);\n  const handleShowTranslation = () => {\n    setShowTranslation(true);\n  };\n  const startOver = () => {\n    // Сбрасываем состояние: возвращаем индекс и очищаем сообщение\n    setCurrentIndex(0);\n    setMessage(\"\");\n    getRandomSentence();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: startDictation.startDictation,\n    children: message ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startOver,\n        className: startDictation.startDictation__startOver,\n        children: \"Start over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 40\n      }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: startDictation.startDictation__translation,\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: startDictation.startDictation__buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTranslation,\n          className: startDictation.startDictation__showTranslation,\n          children: \"Show translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRandomSentence,\n          className: startDictation.startDictation__nextSentence,\n          children: \"Next sentence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(StartDictation, \"JViodCRJyQsAz2UpG0skc+GtpNU=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","startDictation","jsxDEV","_jsxDEV","Fragment","_Fragment","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentences","setAvailableSentences","flatMap","word","sentences","currentIndex","setCurrentIndex","message","setMessage","getRandomSentence","length","selectedSentence","sentence","translation","prevIndex","handleShowTranslation","startOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","startDictation__startOver","startDictation__translation","startDictation__buttons","startDictation__showTranslation","startDictation__nextSentence","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport startDictation from './StartDictation.module.css'\r\n\r\nconst StartDictation = ({ formData }) => {\r\n    const [randomTranslation, setRandomTranslation] = useState('');\r\n    const [randomSentence, setRandomSentence] = useState('');\r\n    const [showTranslation, setShowTranslation] = useState(false);\r\n    const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const getRandomSentence = () => {\r\n        if (currentIndex >= availableSentences.length) {\r\n            setMessage(\"You checked all the sentences\");\r\n            return;\r\n        }\r\n\r\n        const selectedSentence = availableSentences[currentIndex];\r\n        setRandomSentence(selectedSentence.sentence);\r\n        setRandomTranslation(selectedSentence.translation);\r\n        setShowTranslation(false);\r\n        setCurrentIndex(prevIndex => prevIndex + 1); // Переход к следующему предложению\r\n    };\r\n\r\n    useEffect(() => {\r\n        getRandomSentence();\r\n    }, [availableSentences]);\r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true);\r\n    };\r\n\r\n    const startOver = () => {\r\n        // Сбрасываем состояние: возвращаем индекс и очищаем сообщение\r\n        setCurrentIndex(0);\r\n        setMessage(\"\");\r\n        getRandomSentence();\r\n    };\r\n\r\n    return (\r\n        <div className={startDictation.startDictation}>\r\n            {message ? (\r\n                <>\r\n                    <p>{message}</p>\r\n                    <button\r\n                        onClick={startOver}\r\n                        className={startDictation.startDictation__startOver}\r\n                    >\r\n                        Start over\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {randomSentence && <p>{randomSentence}</p>}\r\n                    {showTranslation && (\r\n                        <p className={startDictation.startDictation__translation}>\r\n                            {randomTranslation}\r\n                        </p>\r\n                    )}\r\n                    <div className={startDictation.startDictation__buttons}>\r\n                        <button\r\n                            onClick={handleShowTranslation}\r\n                            className={startDictation.startDictation__showTranslation}\r\n                        >\r\n                            Show translation\r\n                        </button>\r\n                        <button\r\n                            onClick={getRandomSentence}\r\n                            className={startDictation.startDictation__nextSentence}\r\n                        >\r\n                            Next sentence\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartDictation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}