{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import mywordspopup from './MyWordsPopup.module.css';\n// import close from './../../../../../src/images/close.png';\n\n// const MyWordsPopup = ({ onClose, addWord }) => {\n\n//     const [formData, setFormData] = useState({\n//         word: '',\n//         sentences: [{ sentence: '', translation: '' }]\n//     });\n\n//     const [publishedText, setPublishedText] = useState('')\n\n//     useEffect(() => {\n//         const savedText = localStorage.getItem('publishedText');\n//         if (savedText) {\n//             setPublishedText(JSON.parse(savedText))\n//         }\n//     }, [])\n\n//     const [errors, setErrors] = useState({\n//         word: \"Field can't be empty\",\n//         sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\n//     });\n\n//     const [dirtyFields, setDirtyFields] = useState({\n//         word: false,\n//         sentences: [{ sentence: false, translation: false }]\n//     });\n\n//     const [formValid, setFormValid] = useState(false);\n\n//     useEffect(() => {\n//         const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n//         setFormValid(!formHasErrors);\n//     }, [errors]);\n\n//     const handleInput = (e) => {\n//         const { name, value } = e.target;\n//         if (name === 'word') {\n//             setFormData(prevFormData => ({\n//                 ...prevFormData,\n//                 word: value\n//             }));\n//             setErrors(prevErrors => ({\n//                 ...prevErrors,\n//                 word: value ? '' : \"Field can't be empty\"\n//             }));\n//         } else {\n//             const [fieldType, index] = name.split('-');\n//             const idx = parseInt(index, 10);\n//             setFormData(prevFormData => {\n//                 const updatedSentences = prevFormData.sentences.map((sentence, i) => {\n//                     if (i === idx) {\n//                         return { ...sentence, [fieldType]: value };\n//                     }\n//                     return sentence;\n//                 });\n//                 return { ...prevFormData, sentences: updatedSentences };\n//             });\n//             setErrors(prevErrors => {\n//                 const updatedErrors = prevErrors.sentences.map((error, i) => {\n//                     if (i === idx) {\n//                         return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\n//                     }\n//                     return error;\n//                 });\n//                 return { ...prevErrors, sentences: updatedErrors };\n//             });\n//         }\n//     };\n\n//     const handlePublish = () => {\n//         setPublishedText(formData);\n//         localStorage.setItem('publishedText', JSON.stringify(formData))\n//         addWord(formData);\n//         setFormData({\n//             word: '',\n//             sentences: [{ sentence: '', translation: ''}]\n//         })\n//     }\n\n//     const blurHandler = (e) => {\n//         const { name } = e.target;\n//         if (name === 'word') {\n//             setDirtyFields(prevDirtyFields => ({\n//                 ...prevDirtyFields,\n//                 word: true\n//             }));\n//         } else {\n//             const [fieldType, index] = name.split('-');\n//             const idx = parseInt(index, 10);\n//             setDirtyFields(prevDirtyFields => {\n//                 const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\n//                     if (i === idx) {\n//                         return { ...dirty, [fieldType]: true };\n//                     }\n//                     return dirty;\n//                 });\n//                 return { ...prevDirtyFields, sentences: updatedDirtyFields };\n//             });\n//         }\n//     };\n\n//     const addField = () => {\n//         setFormData(prevFormData => ({\n//             ...prevFormData,\n//             sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\n//         }));\n//         setErrors(prevErrors => ({\n//             ...prevErrors,\n//             sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\n//         }));\n//         setDirtyFields(prevDirtyFields => ({\n//             ...prevDirtyFields,\n//             sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\n//         }));\n//     };\n\n//     const removeField = (index) => {\n//         if (formData.sentences.length > 1) {\n//             setFormData(prevFormData => ({\n//                 ...prevFormData,\n//                 sentences: prevFormData.sentences.filter((_, i) => i !== index)\n//             }));\n//             setErrors(prevErrors => ({\n//                 ...prevErrors,\n//                 sentences: prevErrors.sentences.filter((_, i) => i !== index)\n//             }));\n//             setDirtyFields(prevDirtyFields => ({\n//                 ...prevDirtyFields,\n//                 sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n//             }));\n//         }\n//     };\n\n//     return (\n//         <div className={mywordspopup.mywordspopup}>\n//             <div className={mywordspopup.mywordspopup__wrapper}>\n//                 <div className={mywordspopup.mywordspopup__content}>\n//                     <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\n//                     <div className={mywordspopup.mywordspopup__inputs}>\n//                         <input\n//                             onChange={handleInput}\n//                             onBlur={blurHandler}\n//                             name='word'\n//                             type='text'\n//                             placeholder='word'\n//                             value={formData.word}\n//                         />\n//                         {dirtyFields.word && errors.word && (\n//                             <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\n//                         )}\n//                         {formData.sentences.map((sentence, index) => (\n//                             <div key={index} style={{ display: 'flex' }}>\n//                                 <div className={mywordspopup.mywordspopup__inputs_repeated}>\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`sentence-${index}`}\n//                                         type='text'\n//                                         placeholder='sentence with word'\n//                                         value={sentence.sentence}\n//                                         data-index={index}\n//                                     />\n//                                     {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\n//                                     )}\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`translation-${index}`}\n//                                         type='text'\n//                                         placeholder='sentence translation'\n//                                         value={sentence.translation}\n//                                         data-index={index}\n//                                     />\n//                                     {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\n//                                     )}\n//                                 </div>\n//                                 {formData.sentences.length > 1 && (\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>â€“</span>\n//                                 )}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <div className={mywordspopup.mywordspopup__buttons}>\n//                         <button onClick={addField}>add one more sentence</button>\n//                         <button onClick={handlePublish} disabled={!formValid}>done</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default MyWordsPopup;\n\nimport React, { memo, useCallback, useState, useEffect } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport close from './../../../../../src/images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(({\n  onClose,\n  addWord\n}) => {\n  _s();\n  console.log('MyWordsPopup render');\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [publishedText, setPublishedText] = useState('');\n  useEffect(() => {\n    const savedText = localStorage.getItem('publishedText');\n    if (savedText) {\n      setPublishedText(JSON.parse(savedText));\n    }\n  }, []);\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  const handleInput = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        word: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        word: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setFormData(prevFormData => {\n        const updatedSentences = prevFormData.sentences.map((sentence, i) => {\n          if (i === idx) {\n            return {\n              ...sentence,\n              [fieldType]: value\n            };\n          }\n          return sentence;\n        });\n        return {\n          ...prevFormData,\n          sentences: updatedSentences\n        };\n      });\n      setErrors(prevErrors => {\n        const updatedErrors = prevErrors.sentences.map((error, i) => {\n          if (i === idx) {\n            return {\n              ...error,\n              [fieldType]: value ? '' : \"Field can't be empty\"\n            };\n          }\n          return error;\n        });\n        return {\n          ...prevErrors,\n          sentences: updatedErrors\n        };\n      });\n    }\n  }, []);\n  const handlePublish = useCallback(() => {\n    setPublishedText(formData);\n    localStorage.setItem('publishedText', JSON.stringify(formData));\n    addWord(formData);\n    setFormData({\n      word: '',\n      sentences: [{\n        sentence: '',\n        translation: ''\n      }]\n    });\n  }, [formData, addWord]);\n  const blurHandler = useCallback(e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        word: true\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setDirtyFields(prevDirtyFields => {\n        const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\n          if (i === idx) {\n            return {\n              ...dirty,\n              [fieldType]: true\n            };\n          }\n          return dirty;\n        });\n        return {\n          ...prevDirtyFields,\n          sentences: updatedDirtyFields\n        };\n      });\n    }\n  }, []);\n  const addField = useCallback(() => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  }, []);\n  const removeField = useCallback(index => {\n    if (formData.sentences.length > 1) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  }, [formData.sentences.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: mywordspopup.mywordspopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 100\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInput,\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this), formData.sentences.map((sentence, index) => {\n            var _dirtyFields$sentence, _errors$sentences$ind, _dirtyFields$sentence2, _errors$sentences$ind2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: mywordspopup.mywordspopup__inputs_repeated,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleInput,\n                  onBlur: blurHandler,\n                  name: `sentence-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence with word\",\n                  value: sentence.sentence,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence = dirtyFields.sentences[index]) === null || _dirtyFields$sentence === void 0 ? void 0 : _dirtyFields$sentence.sentence) && ((_errors$sentences$ind = errors.sentences[index]) === null || _errors$sentences$ind === void 0 ? void 0 : _errors$sentences$ind.sentence) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].sentence\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleInput,\n                  onBlur: blurHandler,\n                  name: `translation-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence translation\",\n                  value: sentence.translation,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence2 = dirtyFields.sentences[index]) === null || _dirtyFields$sentence2 === void 0 ? void 0 : _dirtyFields$sentence2.translation) && ((_errors$sentences$ind2 = errors.sentences[index]) === null || _errors$sentences$ind2 === void 0 ? void 0 : _errors$sentences$ind2.translation) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].translation\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 33\n              }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  cursor: 'pointer',\n                  marginLeft: '10px'\n                },\n                onClick: () => removeField(index),\n                children: \"\\u2013\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 29\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePublish,\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 9\n  }, this);\n}, \"ddUEh20uyMhHKuFO0pn/sgB5kV8=\")), \"ddUEh20uyMhHKuFO0pn/sgB5kV8=\");\n_c2 = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyWordsPopup$memo\");\n$RefreshReg$(_c2, \"MyWordsPopup\");","map":{"version":3,"names":["React","memo","useCallback","useState","useEffect","mywordspopup","close","jsxDEV","_jsxDEV","MyWordsPopup","_s","_c","onClose","addWord","console","log","formData","setFormData","word","sentences","sentence","translation","publishedText","setPublishedText","savedText","localStorage","getItem","JSON","parse","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","some","e","handleInput","name","value","target","prevFormData","prevErrors","fieldType","index","split","idx","parseInt","updatedSentences","map","i","updatedErrors","error","handlePublish","setItem","stringify","blurHandler","prevDirtyFields","updatedDirtyFields","dirty","addField","removeField","length","filter","_","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mywordspopup__inputs","onChange","onBlur","type","placeholder","style","color","fontSize","_dirtyFields$sentence","_errors$sentences$ind","_dirtyFields$sentence2","_errors$sentences$ind2","display","mywordspopup__inputs_repeated","cursor","marginLeft","mywordspopup__buttons","disabled","_c2","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import mywordspopup from './MyWordsPopup.module.css';\r\n// import close from './../../../../../src/images/close.png';\r\n\r\n// const MyWordsPopup = ({ onClose, addWord }) => {\r\n\r\n//     const [formData, setFormData] = useState({\r\n//         word: '',\r\n//         sentences: [{ sentence: '', translation: '' }]\r\n//     });\r\n\r\n//     const [publishedText, setPublishedText] = useState('')\r\n\r\n//     useEffect(() => {\r\n//         const savedText = localStorage.getItem('publishedText');\r\n//         if (savedText) {\r\n//             setPublishedText(JSON.parse(savedText))\r\n//         }\r\n//     }, [])\r\n\r\n//     const [errors, setErrors] = useState({\r\n//         word: \"Field can't be empty\",\r\n//         sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n//     });\r\n\r\n//     const [dirtyFields, setDirtyFields] = useState({\r\n//         word: false,\r\n//         sentences: [{ sentence: false, translation: false }]\r\n//     });\r\n\r\n//     const [formValid, setFormValid] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n//         setFormValid(!formHasErrors);\r\n//     }, [errors]);\r\n\r\n//     const handleInput = (e) => {\r\n//         const { name, value } = e.target;\r\n//         if (name === 'word') {\r\n//             setFormData(prevFormData => ({\r\n//                 ...prevFormData,\r\n//                 word: value\r\n//             }));\r\n//             setErrors(prevErrors => ({\r\n//                 ...prevErrors,\r\n//                 word: value ? '' : \"Field can't be empty\"\r\n//             }));\r\n//         } else {\r\n//             const [fieldType, index] = name.split('-');\r\n//             const idx = parseInt(index, 10);\r\n//             setFormData(prevFormData => {\r\n//                 const updatedSentences = prevFormData.sentences.map((sentence, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...sentence, [fieldType]: value };\r\n//                     }\r\n//                     return sentence;\r\n//                 });\r\n//                 return { ...prevFormData, sentences: updatedSentences };\r\n//             });\r\n//             setErrors(prevErrors => {\r\n//                 const updatedErrors = prevErrors.sentences.map((error, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\r\n//                     }\r\n//                     return error;\r\n//                 });\r\n//                 return { ...prevErrors, sentences: updatedErrors };\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handlePublish = () => {\r\n//         setPublishedText(formData);\r\n//         localStorage.setItem('publishedText', JSON.stringify(formData))\r\n//         addWord(formData);\r\n//         setFormData({\r\n//             word: '',\r\n//             sentences: [{ sentence: '', translation: ''}]\r\n//         })\r\n//     }\r\n\r\n//     const blurHandler = (e) => {\r\n//         const { name } = e.target;\r\n//         if (name === 'word') {\r\n//             setDirtyFields(prevDirtyFields => ({\r\n//                 ...prevDirtyFields,\r\n//                 word: true\r\n//             }));\r\n//         } else {\r\n//             const [fieldType, index] = name.split('-');\r\n//             const idx = parseInt(index, 10);\r\n//             setDirtyFields(prevDirtyFields => {\r\n//                 const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...dirty, [fieldType]: true };\r\n//                     }\r\n//                     return dirty;\r\n//                 });\r\n//                 return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const addField = () => {\r\n//         setFormData(prevFormData => ({\r\n//             ...prevFormData,\r\n//             sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n//         }));\r\n//         setErrors(prevErrors => ({\r\n//             ...prevErrors,\r\n//             sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n//         }));\r\n//         setDirtyFields(prevDirtyFields => ({\r\n//             ...prevDirtyFields,\r\n//             sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n//         }));\r\n//     };\r\n\r\n//     const removeField = (index) => {\r\n//         if (formData.sentences.length > 1) {\r\n//             setFormData(prevFormData => ({\r\n//                 ...prevFormData,\r\n//                 sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//             setErrors(prevErrors => ({\r\n//                 ...prevErrors,\r\n//                 sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//             setDirtyFields(prevDirtyFields => ({\r\n//                 ...prevDirtyFields,\r\n//                 sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className={mywordspopup.mywordspopup}>\r\n//             <div className={mywordspopup.mywordspopup__wrapper}>\r\n//                 <div className={mywordspopup.mywordspopup__content}>\r\n//                     <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n//                     <div className={mywordspopup.mywordspopup__inputs}>\r\n//                         <input\r\n//                             onChange={handleInput}\r\n//                             onBlur={blurHandler}\r\n//                             name='word'\r\n//                             type='text'\r\n//                             placeholder='word'\r\n//                             value={formData.word}\r\n//                         />\r\n//                         {dirtyFields.word && errors.word && (\r\n//                             <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n//                         )}\r\n//                         {formData.sentences.map((sentence, index) => (\r\n//                             <div key={index} style={{ display: 'flex' }}>\r\n//                                 <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`sentence-${index}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence with word'\r\n//                                         value={sentence.sentence}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                     {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\r\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n//                                     )}\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`translation-${index}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence translation'\r\n//                                         value={sentence.translation}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                     {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\r\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n//                                     )}\r\n//                                 </div>\r\n//                                 {formData.sentences.length > 1 && (\r\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>â€“</span>\r\n//                                 )}\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                     <div className={mywordspopup.mywordspopup__buttons}>\r\n//                         <button onClick={addField}>add one more sentence</button>\r\n//                         <button onClick={handlePublish} disabled={!formValid}>done</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MyWordsPopup;\r\n\r\n\r\n\r\nimport React, { memo, useCallback, useState, useEffect } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\nimport close from './../../../../../src/images/close.png';\r\n\r\nconst MyWordsPopup = memo(({ onClose, addWord }) => {\r\n    console.log('MyWordsPopup render');\r\n\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [{ sentence: '', translation: '' }]\r\n    });\r\n\r\n    const [publishedText, setPublishedText] = useState('')\r\n\r\n    useEffect(() => {\r\n        const savedText = localStorage.getItem('publishedText');\r\n        if (savedText) {\r\n            setPublishedText(JSON.parse(savedText))\r\n        }\r\n    }, [])\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    });\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    });\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [errors]);\r\n\r\n    const handleInput = useCallback((e) => {\r\n        const { name, value } = e.target;\r\n        if (name === 'word') {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                word: value\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                word: value ? '' : \"Field can't be empty\"\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setFormData(prevFormData => {\r\n                const updatedSentences = prevFormData.sentences.map((sentence, i) => {\r\n                    if (i === idx) {\r\n                        return { ...sentence, [fieldType]: value };\r\n                    }\r\n                    return sentence;\r\n                });\r\n                return { ...prevFormData, sentences: updatedSentences };\r\n            });\r\n            setErrors(prevErrors => {\r\n                const updatedErrors = prevErrors.sentences.map((error, i) => {\r\n                    if (i === idx) {\r\n                        return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\r\n                    }\r\n                    return error;\r\n                });\r\n                return { ...prevErrors, sentences: updatedErrors };\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const handlePublish = useCallback(() => {\r\n        setPublishedText(formData);\r\n        localStorage.setItem('publishedText', JSON.stringify(formData))\r\n        addWord(formData);\r\n        setFormData({\r\n            word: '',\r\n            sentences: [{ sentence: '', translation: ''}]\r\n        })\r\n    }, [formData, addWord]);\r\n\r\n    const blurHandler = useCallback((e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                word: true\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setDirtyFields(prevDirtyFields => {\r\n                const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\r\n                    if (i === idx) {\r\n                        return { ...dirty, [fieldType]: true };\r\n                    }\r\n                    return dirty;\r\n                });\r\n                return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const addField = useCallback(() => {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    }, []);\r\n\r\n    const removeField = useCallback((index) => {\r\n        if (formData.sentences.length > 1) {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    }, [formData.sentences.length]);\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            onChange={handleInput}\r\n                            onBlur={blurHandler}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={formData.word}\r\n                        />\r\n                        {dirtyFields.word && errors.word && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n                        )}\r\n                        {formData.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n                                    )}\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n                                    )}\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>â€“</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button onClick={handlePublish} disabled={!formValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyWordsPopup;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACrE,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,YAAY,gBAAAC,EAAA,eAAGT,IAAI,CAAAU,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAAAH,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}