{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport close from './../../../../../src/images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = ({\n  onClose,\n  addWord\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  useEffect(() => {\n    setFormData(JSON.parse(localStorage.getItem('formData')) || []);\n    count = localStorage.getItem('posts_count');\n  }, []);\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        word: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        word: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setFormData(prevFormData => {\n        const updatedSentences = prevFormData.sentences.map((sentence, i) => {\n          if (i === idx) {\n            return {\n              ...sentence,\n              [fieldType]: value\n            };\n          }\n          return sentence;\n        });\n        return {\n          ...prevFormData,\n          sentences: updatedSentences\n        };\n      });\n      setErrors(prevErrors => {\n        const updatedErrors = prevErrors.sentences.map((error, i) => {\n          if (i === idx) {\n            return {\n              ...error,\n              [fieldType]: value ? '' : \"Field can't be empty\"\n            };\n          }\n          return error;\n        });\n        return {\n          ...prevErrors,\n          sentences: updatedErrors\n        };\n      });\n    }\n  };\n  const blurHandler = e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        word: true\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setDirtyFields(prevDirtyFields => {\n        const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\n          if (i === idx) {\n            return {\n              ...dirty,\n              [fieldType]: true\n            };\n          }\n          return dirty;\n        });\n        return {\n          ...prevDirtyFields,\n          sentences: updatedDirtyFields\n        };\n      });\n    }\n  };\n  const addField = () => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  };\n  const removeField = index => {\n    if (formData.sentences.length > 1) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  };\n  const handleSubmit = () => {\n    addWord(formData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: mywordspopup.mywordspopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 100\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInput,\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this), formData.sentences.map((sentence, index) => {\n            var _dirtyFields$sentence, _errors$sentences$ind, _dirtyFields$sentence2, _errors$sentences$ind2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: mywordspopup.mywordspopup__inputs_repeated,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleInput,\n                  onBlur: blurHandler,\n                  name: `sentence-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence with word\",\n                  value: sentence.sentence,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence = dirtyFields.sentences[index]) === null || _dirtyFields$sentence === void 0 ? void 0 : _dirtyFields$sentence.sentence) && ((_errors$sentences$ind = errors.sentences[index]) === null || _errors$sentences$ind === void 0 ? void 0 : _errors$sentences$ind.sentence) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].sentence\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleInput,\n                  onBlur: blurHandler,\n                  name: `translation-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence translation\",\n                  value: sentence.translation,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence2 = dirtyFields.sentences[index]) === null || _dirtyFields$sentence2 === void 0 ? void 0 : _dirtyFields$sentence2.translation) && ((_errors$sentences$ind2 = errors.sentences[index]) === null || _errors$sentences$ind2 === void 0 ? void 0 : _errors$sentences$ind2.translation) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].translation\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  cursor: 'pointer',\n                  marginLeft: '10px'\n                },\n                onClick: () => removeField(index),\n                children: \"\\u2013\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmit,\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"0eEWL1RYGvge3A881pAhefI5LO8=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useRef","useState","mywordspopup","close","jsxDEV","_jsxDEV","MyWordsPopup","onClose","addWord","_s","formData","setFormData","word","sentences","sentence","translation","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","some","e","JSON","parse","localStorage","getItem","count","handleInput","name","value","target","prevFormData","prevErrors","fieldType","index","split","idx","parseInt","updatedSentences","map","i","updatedErrors","error","blurHandler","prevDirtyFields","updatedDirtyFields","dirty","addField","removeField","length","filter","_","handleSubmit","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mywordspopup__inputs","onChange","onBlur","type","placeholder","style","color","fontSize","_dirtyFields$sentence","_errors$sentences$ind","_dirtyFields$sentence2","_errors$sentences$ind2","display","mywordspopup__inputs_repeated","cursor","marginLeft","mywordspopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\nimport close from './../../../../../src/images/close.png';\r\n\r\nconst MyWordsPopup = ({ onClose, addWord }) => {\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [{ sentence: '', translation: '' }]\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    });\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    });\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [errors]);\r\n\r\n    useEffect (() => {\r\n        setFormData(JSON.parse(localStorage.getItem('formData')) || [])\r\n        count = localStorage.getItem('posts_count')\r\n    }, [])\r\n\r\n    const handleInput = (e) => {\r\n        const { name, value } = e.target;\r\n        if (name === 'word') {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                word: value\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                word: value ? '' : \"Field can't be empty\"\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setFormData(prevFormData => {\r\n                const updatedSentences = prevFormData.sentences.map((sentence, i) => {\r\n                    if (i === idx) {\r\n                        return { ...sentence, [fieldType]: value };\r\n                    }\r\n                    return sentence;\r\n                });\r\n                return { ...prevFormData, sentences: updatedSentences };\r\n            });\r\n            setErrors(prevErrors => {\r\n                const updatedErrors = prevErrors.sentences.map((error, i) => {\r\n                    if (i === idx) {\r\n                        return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\r\n                    }\r\n                    return error;\r\n                });\r\n                return { ...prevErrors, sentences: updatedErrors };\r\n            });\r\n        }\r\n    };\r\n\r\n    const blurHandler = (e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                word: true\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setDirtyFields(prevDirtyFields => {\r\n                const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\r\n                    if (i === idx) {\r\n                        return { ...dirty, [fieldType]: true };\r\n                    }\r\n                    return dirty;\r\n                });\r\n                return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n            });\r\n        }\r\n    };\r\n\r\n    const addField = () => {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    };\r\n\r\n    const removeField = (index) => {\r\n        if (formData.sentences.length > 1) {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        addWord(formData);\r\n    };\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            onChange={handleInput}\r\n                            onBlur={blurHandler}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={formData.word}\r\n                        />\r\n                        {dirtyFields.word && errors.word && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n                        )}\r\n                        {formData.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n                                    )}\r\n                                    <input\r\n                                        onChange={handleInput}\r\n                                        onBlur={blurHandler}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n                                    )}\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button onClick={handleSubmit} disabled={!formValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWordsPopup;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}