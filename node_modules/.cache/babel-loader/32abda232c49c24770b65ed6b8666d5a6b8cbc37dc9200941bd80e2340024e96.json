{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [name]: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      const updatedSentences = [...formData.sentences];\n      updatedSentences[index][fieldName] = value;\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: updatedSentences\n      }));\n      const updatedErrors = [...errors.sentences];\n      updatedErrors[index][fieldName] = value ? '' : \"Field can't be empty\";\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: updatedErrors\n      }));\n    }\n  };\n  const blurHandler = e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        [name]: true\n      }));\n    } else {\n      const index = parseInt(e.target.dataset.index, 10);\n      const fieldName = name.split('-')[1];\n      const updatedDirtyFields = [...dirtyFields.sentences];\n      updatedDirtyFields[index][fieldName] = true;\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: updatedDirtyFields\n      }));\n    }\n  };\n  const addField = e => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  };\n  const removeField = index => {\n    if (formData.sentences.length > 1) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleInput,\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 61\n          }, this), formData.sentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: mywordspopup.mywordspopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `sentence-${index}`,\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: formData.sentences[index].sentence || '',\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 115\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleInput,\n                onBlur: blurHandler,\n                name: `translation-${index}`,\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: formData.sentences[index].translation || '',\n                \"data-index\": index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 37\n              }, this), dirtyFields.sentences[index].translation && errors.sentences[index].translation && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: errors.sentences[index].translation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 121\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginLeft: '10px'\n              },\n              onClick: () => removeField(index),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"xS4j7Rew6AVgUQnkrtiueYuCDEI=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","jsxDEV","_jsxDEV","MyWordsPopup","_s","formData","setFormData","word","sentences","sentence","translation","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","some","e","handleInput","name","value","target","prevFormData","prevErrors","index","parseInt","dataset","fieldName","split","updatedSentences","updatedErrors","blurHandler","prevDirtyFields","updatedDirtyFields","addField","removeField","length","filter","_","i","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__inputs","onChange","onBlur","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","map","display","mywordspopup__inputs_repeated","cursor","marginLeft","onClick","mywordspopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css'\r\n\r\nconst MyWordsPopup = () => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [\r\n            {\r\n                sentence: '',\r\n                translation: ''\r\n            }\r\n        ]\r\n    })\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    })\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    })\r\n\r\n    const [formValid, setFormValid] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors)\r\n    }, [errors]);\r\n\r\n    const handleInput = (e) => {\r\n        const {name, value} = e.target;\r\n        if (name === 'word') {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            [name]: value\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: value ? '' : \"Field can't be empty\"\r\n        }))\r\n    } else {\r\n        const index = parseInt(e.target.dataset.index, 10);\r\n        const fieldName = name.split('-')[1];\r\n        const updatedSentences = [...formData.sentences];\r\n        updatedSentences[index][fieldName] = value;\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: updatedSentences\r\n        }));\r\n        const updatedErrors = [...errors.sentences];\r\n        updatedErrors[index][fieldName] = value ? '' : \"Field can't be empty\";\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: updatedErrors\r\n        }));\r\n    }\r\n}\r\n\r\n    const blurHandler = (e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                [name]: true\r\n            }));\r\n        } else {\r\n            const index = parseInt(e.target.dataset.index, 10);\r\n            const fieldName = name.split('-')[1];\r\n            const updatedDirtyFields = [...dirtyFields.sentences];\r\n            updatedDirtyFields[index][fieldName] = true;\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: updatedDirtyFields\r\n            }));\r\n        }\r\n    }\r\n\r\n    const addField = (e) => {\r\n        setFormData(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    }\r\n\r\n    const removeField = (index) => {\r\n        if (formData.sentences.length > 1) {\r\n            setFormData(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input onChange={handleInput} onBlur={blurHandler} name='word' type='text' placeholder='word' value={formData.word}></input>\r\n                        {dirtyFields.word && errors.word && <div style={{color: 'red', fontSize: '12px'}}>{errors.word}</div>}\r\n                        {formData.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex'}}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input onChange={handleInput} onBlur={blurHandler} name={`sentence-${index}`} type='text' placeholder='sentence with word' value={formData.sentences[index].sentence || ''} data-index={index}></input>\r\n                                    {dirtyFields.sentences[index].sentence && errors.sentences[index].sentence && <div style={{color: 'red', fontSize: '12px'}}>{errors.sentences[index].sentence}</div>}\r\n                                    <input onChange={handleInput} onBlur={blurHandler} name={`translation-${index}`} type='text' placeholder='sentence translation' value={formData.sentences[index].translation || ''} data-index={index}></input>\r\n                                    {dirtyFields.sentences[index].translation && errors.sentences[index].translation && <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>}\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n                                )}\r\n                            </div>\r\n                ))}\r\n                </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button disabled={!formValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyWordsPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}