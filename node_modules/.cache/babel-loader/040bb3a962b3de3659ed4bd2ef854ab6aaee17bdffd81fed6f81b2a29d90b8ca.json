{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\EditPopup\\\\EditPopup.jsx\",\n  _s = $RefreshSig$();\nimport editPopup from './EditPopup.module.css';\nimport close from './../../../../../images/close.png';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  formData,\n  onClose,\n  addField,\n  handleInput,\n  removeField,\n  index\n}) => {\n  _s();\n  const [localFormData, setLocalFormData] = useState({\n    ...formData\n  });\n  const [sentenceErrors, setSentenceErrors] = useState([]);\n  const [translationErrors, setTranslationErrors] = useState([]);\n  const [editFormValid, setEditFormValid] = useState(false);\n  useEffect(() => {\n    validateForm();\n  }, [localFormData]);\n  const validateForm = () => {\n    const newSentenceErrors = [];\n    const newTranslationErrors = [];\n    localFormData.sentences.forEach((sentence, i) => {\n      if (!sentence.sentence) {\n        newSentenceErrors[i] = \"Sentence field can't be empty\";\n      } else {\n        newSentenceErrors[i] = \"\";\n      }\n      if (!sentence.translation) {\n        newTranslationErrors[i] = \"Translation field can't be empty\";\n      } else {\n        newTranslationErrors[i] = \"\";\n      }\n    });\n    setSentenceErrors(newSentenceErrors);\n    setTranslationErrors(newTranslationErrors);\n    const isFormValid = newSentenceErrors.every(err => !err) && newTranslationErrors.every(err => !err);\n    setEditFormValid(isFormValid);\n  };\n  const handleLocalInput = (e, index, field) => {\n    const {\n      value\n    } = e.target;\n    setLocalFormData(prevData => {\n      const updatedData = {\n        ...prevData\n      };\n      if (field === 'word') {\n        updatedData.word = value;\n      } else {\n        const [fieldType, idx] = field.split('-');\n        updatedData.sentences[idx][fieldType] = value;\n      }\n      return updatedData;\n    });\n  };\n  const handlePublishInEdit = () => {\n    handleInput({\n      target: {\n        value: localFormData.word\n      }\n    }, index, 'word');\n    localFormData.sentences.forEach((sentence, i) => {\n      handleInput({\n        target: {\n          value: sentence.sentence\n        }\n      }, index, `sentence-${i}`);\n      handleInput({\n        target: {\n          value: sentence.translation\n        }\n      }, index, `translation-${i}`);\n    });\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: editPopup.editPopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: editPopup.editPopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: editPopup.editPopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: editPopup.editPopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => handleLocalInput(e, index, 'word'),\n            type: \"text\",\n            placeholder: \"word\",\n            value: localFormData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), localFormData.sentences.map((sentence, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              marginBottom: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: editPopup.editPopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleLocalInput(e, index, `sentence-${i}`),\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 37\n              }, this), sentenceErrors[i] && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: sentenceErrors[i]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 59\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleLocalInput(e, index, `translation-${i}`),\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }, this), translationErrors[i] && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red',\n                  fontSize: '12px'\n                },\n                children: translationErrors[i]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 62\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this), localFormData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginTop: '10px'\n              },\n              onClick: () => removeField(i),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePublishInEdit,\n            disabled: !editFormValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(EditPopup, \"zNYbb+zVUrrzZmjDqXQfRjDo5Zc=\");\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["editPopup","close","useEffect","useState","jsxDEV","_jsxDEV","EditPopup","formData","onClose","addField","handleInput","removeField","index","_s","localFormData","setLocalFormData","sentenceErrors","setSentenceErrors","translationErrors","setTranslationErrors","editFormValid","setEditFormValid","validateForm","newSentenceErrors","newTranslationErrors","sentences","forEach","sentence","i","translation","isFormValid","every","err","handleLocalInput","e","field","value","target","prevData","updatedData","word","fieldType","idx","split","handlePublishInEdit","className","children","editPopup__wrapper","editPopup__content","editPopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","editPopup__inputs","onChange","type","placeholder","map","style","display","flexDirection","marginBottom","editPopup__inputs_repeated","color","fontSize","length","cursor","marginTop","editPopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/EditPopup/EditPopup.jsx"],"sourcesContent":["import editPopup from './EditPopup.module.css';\r\nimport close from './../../../../../images/close.png';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst EditPopup = ({ formData, onClose, addField, handleInput, removeField, index }) => {\r\n\r\n    const [localFormData, setLocalFormData] = useState({...formData});\r\n    const [sentenceErrors, setSentenceErrors] = useState([]);\r\n    const [translationErrors, setTranslationErrors] = useState([]);\r\n    const [editFormValid, setEditFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        validateForm()\r\n    }, [localFormData]);\r\n\r\n    const validateForm = () => {\r\n        const newSentenceErrors = [];\r\n        const newTranslationErrors = [];\r\n\r\n        localFormData.sentences.forEach((sentence, i) => {\r\n            if (!sentence.sentence) {\r\n                newSentenceErrors[i] = \"Sentence field can't be empty\";\r\n            } else {\r\n                newSentenceErrors[i] = \"\";\r\n            }\r\n            if (!sentence.translation) {\r\n                newTranslationErrors[i] = \"Translation field can't be empty\";\r\n            } else {\r\n                newTranslationErrors[i] = \"\";\r\n            }\r\n        });\r\n\r\n        setSentenceErrors(newSentenceErrors);\r\n        setTranslationErrors(newTranslationErrors);\r\n\r\n        const isFormValid = newSentenceErrors.every(err => !err) && newTranslationErrors.every(err => !err);\r\n        setEditFormValid(isFormValid);\r\n    }\r\n\r\n    const handleLocalInput = (e, index, field) => {\r\n        const { value } = e.target;\r\n        setLocalFormData(prevData => {\r\n            const updatedData = { ...prevData };\r\n            if (field === 'word') {\r\n                updatedData.word = value;\r\n            } else {\r\n                const [fieldType, idx] = field.split('-');\r\n                updatedData.sentences[idx][fieldType] = value;\r\n            }\r\n            return updatedData;\r\n        });\r\n    };\r\n\r\n    const handlePublishInEdit = () => {\r\n        handleInput({ target: { value: localFormData.word } }, index, 'word');\r\n        localFormData.sentences.forEach((sentence, i) => {\r\n            handleInput({ target: { value: sentence.sentence } }, index, `sentence-${i}`);\r\n            handleInput({ target: { value: sentence.translation } }, index, `translation-${i}`);\r\n        });\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className={editPopup.editPopup}>\r\n            <div className={editPopup.editPopup__wrapper}>\r\n                <div className={editPopup.editPopup__content}>\r\n                    <button className={editPopup.editPopup__content_close} onClick={onClose}>\r\n                        <img src={close} alt='Close' />\r\n                    </button>\r\n                    <div className={editPopup.editPopup__inputs}>\r\n                        <input\r\n                            onChange={(e) => handleLocalInput(e, index, 'word')}\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={localFormData.word}\r\n                        />\r\n                        {localFormData.sentences.map((sentence, i) => (\r\n                            <div key={i} style={{ display: 'flex', flexDirection: 'column', marginBottom: '10px' }}>\r\n                                <div className={editPopup.editPopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={(e) => handleLocalInput(e, index, `sentence-${i}`)}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                    />\r\n                                    {sentenceErrors[i] && <div style={{ color: 'red', fontSize: '12px' }}>{sentenceErrors[i]}</div>}\r\n                                    <input\r\n                                        onChange={(e) => handleLocalInput(e, index, `translation-${i}`)}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                    />\r\n                                    {translationErrors[i] && <div style={{ color: 'red', fontSize: '12px' }}>{translationErrors[i]}</div>}\r\n                                </div>\r\n                                {localFormData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginTop: '10px' }} onClick={() => removeField(i)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={editPopup.editPopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button onClick={handlePublishInEdit} disabled={!editFormValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}