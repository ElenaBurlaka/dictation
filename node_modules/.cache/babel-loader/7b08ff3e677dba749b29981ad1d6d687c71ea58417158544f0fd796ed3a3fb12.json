{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\EditPopup\\\\EditPopup.jsx\";\n// import editPopup from './EditPopup.module.css';\n// import close from './../../../../../images/close.png';\n\n// const EditPopup = ({ formData, handleInput, blurHandler, onClose, addField, removeField, handlePublish, index }) => {\n//     if (!formData || typeof formData.word === 'undefined' || !formData.sentences) {\n//         return null; // Или отобразите сообщение об ошибке\n//     }\n\n//     return (\n//         <div className={editPopup.editPopup}>\n//             <div className={editPopup.editPopup__wrapper}>\n//                 <div className={editPopup.editPopup__content}>\n//                     <button className={editPopup.editPopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\n//                     <div className={editPopup.editPopup__inputs}>\n//                         <input\n//                             onChange={(e) => handleInput(e, index, 'word')}\n//                             onBlur={(e) => blurHandler(e, index, 'word')}\n//                             type='text'\n//                             placeholder='word'\n//                             value={formData.word}\n//                         />\n//                         {formData.sentences.map((sentence, i) => (\n//                             <div key={i} style={{ display: 'flex' }}>\n//                                 <div className={editPopup.editPopup__inputs_repeated}>\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`sentence-${i}`}\n//                                         type='text'\n//                                         placeholder='sentence with word'\n//                                         value={sentence.sentence}\n//                                         data-index={index}\n//                                     />\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`translation-${i}`}\n//                                         type='text'\n//                                         placeholder='sentence translation'\n//                                         value={sentence.translation}\n//                                         data-index={index}\n//                                     />\n//                                 </div>\n//                                 {formData.sentences.length > 1 && (\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(i)}>–</span>\n//                                 )}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <div className={editPopup.editPopup__buttons}>\n//                         <button onClick={addField}>add one more sentence</button>\n//                         <button onClick={handlePublish}>done</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default EditPopup;\n\nimport editPopup from './EditPopup.module.css';\nimport close from './../../../../../images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  formData,\n  handleInput,\n  blurHandler,\n  onClose,\n  addField,\n  removeField,\n  handlePublish,\n  index\n}) => {\n  if (!formData || typeof formData.word === 'undefined' || !formData.sentences) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: editPopup.editPopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: editPopup.editPopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: editPopup.editPopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: editPopup.editPopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => handleInput(e, index, 'word'),\n            onBlur: e => blurHandler(e, index, 'word'),\n            type: \"text\",\n            placeholder: \"word\",\n            value: formData.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), formData.sentences.map((sentence, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: editPopup.editPopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleInput(e, index, `sentence-${i}`),\n                onBlur: e => blurHandler(e, index, `sentence-${i}`),\n                name: `sentence-${i}`,\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence,\n                \"data-index\": i\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleInput(e, index, `translation-${i}`),\n                onBlur: e => blurHandler(e, index, `translation-${i}`),\n                name: `translation-${i}`,\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation,\n                \"data-index\": i\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), formData.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginLeft: '10px'\n              },\n              onClick: () => removeField(i),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: editPopup.editPopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePublish(index),\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["editPopup","close","jsxDEV","_jsxDEV","EditPopup","formData","handleInput","blurHandler","onClose","addField","removeField","handlePublish","index","word","sentences","className","children","editPopup__wrapper","editPopup__content","editPopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","editPopup__inputs","onChange","e","onBlur","type","placeholder","value","map","sentence","i","style","display","editPopup__inputs_repeated","name","translation","length","cursor","marginLeft","editPopup__buttons","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/EditPopup/EditPopup.jsx"],"sourcesContent":["// import editPopup from './EditPopup.module.css';\r\n// import close from './../../../../../images/close.png';\r\n\r\n// const EditPopup = ({ formData, handleInput, blurHandler, onClose, addField, removeField, handlePublish, index }) => {\r\n//     if (!formData || typeof formData.word === 'undefined' || !formData.sentences) {\r\n//         return null; // Или отобразите сообщение об ошибке\r\n//     }\r\n\r\n//     return (\r\n//         <div className={editPopup.editPopup}>\r\n//             <div className={editPopup.editPopup__wrapper}>\r\n//                 <div className={editPopup.editPopup__content}>\r\n//                     <button className={editPopup.editPopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n//                     <div className={editPopup.editPopup__inputs}>\r\n//                         <input\r\n//                             onChange={(e) => handleInput(e, index, 'word')}\r\n//                             onBlur={(e) => blurHandler(e, index, 'word')}\r\n//                             type='text'\r\n//                             placeholder='word'\r\n//                             value={formData.word}\r\n//                         />\r\n//                         {formData.sentences.map((sentence, i) => (\r\n//                             <div key={i} style={{ display: 'flex' }}>\r\n//                                 <div className={editPopup.editPopup__inputs_repeated}>\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`sentence-${i}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence with word'\r\n//                                         value={sentence.sentence}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`translation-${i}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence translation'\r\n//                                         value={sentence.translation}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                 </div>\r\n//                                 {formData.sentences.length > 1 && (\r\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(i)}>–</span>\r\n//                                 )}\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                     <div className={editPopup.editPopup__buttons}>\r\n//                         <button onClick={addField}>add one more sentence</button>\r\n//                         <button onClick={handlePublish}>done</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default EditPopup;\r\n\r\n\r\nimport editPopup from './EditPopup.module.css';\r\nimport close from './../../../../../images/close.png';\r\n\r\nconst EditPopup = ({ formData, handleInput, blurHandler, onClose, addField, removeField, handlePublish, index }) => {\r\n    if (!formData || typeof formData.word === 'undefined' || !formData.sentences) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={editPopup.editPopup}>\r\n            <div className={editPopup.editPopup__wrapper}>\r\n                <div className={editPopup.editPopup__content}>\r\n                    <button className={editPopup.editPopup__content_close} onClick={onClose}>\r\n                        <img src={close} alt='Close' />\r\n                    </button>\r\n                    <div className={editPopup.editPopup__inputs}>\r\n                        <input\r\n                            onChange={(e) => handleInput(e, index, 'word')}\r\n                            onBlur={(e) => blurHandler(e, index, 'word')}\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={formData.word}\r\n                        />\r\n                        {formData.sentences.map((sentence, i) => (\r\n                            <div key={i} style={{ display: 'flex' }}>\r\n                                <div className={editPopup.editPopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={(e) => handleInput(e, index, `sentence-${i}`)}\r\n                                        onBlur={(e) => blurHandler(e, index, `sentence-${i}`)}\r\n                                        name={`sentence-${i}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={i}\r\n                                    />\r\n                                    <input\r\n                                        onChange={(e) => handleInput(e, index, `translation-${i}`)}\r\n                                        onBlur={(e) => blurHandler(e, index, `translation-${i}`)}\r\n                                        name={`translation-${i}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={i}\r\n                                    />\r\n                                </div>\r\n                                {formData.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(i)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={editPopup.editPopup__buttons}>\r\n                        <button onClick={addField}>add one more sentence</button>\r\n                        <button onClick={() => handlePublish(index)}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditPopup;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}