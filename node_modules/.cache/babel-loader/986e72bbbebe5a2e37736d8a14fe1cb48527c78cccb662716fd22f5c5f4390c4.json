{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentences, setAvailableSentences] = useState(formData.flatMap(word => word.sentences));\n  const [usedSentences, setUsedSentences] = useState([]); // Храним уже использованные предложения\n  const [message, setMessage] = useState(\"\");\n  const getRandomSentence = useCallback(() => {\n    if (availableSentences.length === 0) {\n      setMessage(\"You checked all the sentences\");\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableSentences.length);\n    const selectedSentence = availableSentences[randomIndex];\n    setRandomSentence(selectedSentence.sentence);\n    setRandomTranslation(selectedSentence.translation);\n    setShowTranslation(false);\n\n    // Убираем выбранное предложение из списка доступных и добавляем его в использованные\n    setAvailableSentences(prevSentences => prevSentences.filter((item, index) => index !== randomIndex));\n    setUsedSentences(prevUsed => [...prevUsed, selectedSentence]);\n  }, [availableSentences]);\n  useEffect(() => {\n    if (availableSentences.length > 0) {\n      getRandomSentence();\n    }\n  }, [getRandomSentence]);\n  const handleShowTranslation = () => {\n    setShowTranslation(true);\n  };\n  const startOver = () => {\n    // Сбрасываем состояние: доступные предложения возвращаются, сообщение и использованные предложения очищаются\n    setAvailableSentences(formData.flatMap(word => word.sentences));\n    setUsedSentences([]);\n    setMessage(\"\");\n    setRandomSentence(\"\");\n    setRandomTranslation(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: startDictation.startDictation,\n    children: message ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startOver,\n        className: startDictation.startDictation__startOver,\n        children: \"Start over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 40\n      }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: startDictation.startDictation__translation,\n        children: randomTranslation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: startDictation.startDictation__buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowTranslation,\n          className: startDictation.startDictation__showTranslation,\n          children: \"Show translation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getRandomSentence,\n          className: startDictation.startDictation__nextSentence,\n          children: \"Next sentence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(StartDictation, \"nDCZLkXviBzTS8clH3njvh/Q2+U=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","useCallback","startDictation","jsxDEV","_jsxDEV","Fragment","_Fragment","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentences","setAvailableSentences","flatMap","word","sentences","usedSentences","setUsedSentences","message","setMessage","getRandomSentence","length","randomIndex","Math","floor","random","selectedSentence","sentence","translation","prevSentences","filter","item","index","prevUsed","handleShowTranslation","startOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","startDictation__startOver","startDictation__translation","startDictation__buttons","startDictation__showTranslation","startDictation__nextSentence","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport startDictation from './StartDictation.module.css'\r\n\r\nconst StartDictation = ({ formData }) => {\r\n    const [randomTranslation, setRandomTranslation] = useState('')\r\n    const [randomSentence, setRandomSentence] = useState('')\r\n    const [showTranslation, setShowTranslation] = useState(false)\r\n    const [availableSentences, setAvailableSentences] = useState(\r\n        formData.flatMap(word => word.sentences)\r\n    )\r\n    const [usedSentences, setUsedSentences] = useState([]); // Храним уже использованные предложения\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const getRandomSentence = useCallback(() => {\r\n        if (availableSentences.length === 0) {\r\n            setMessage(\"You checked all the sentences\");\r\n            return;\r\n        }\r\n\r\n        const randomIndex = Math.floor(Math.random() * availableSentences.length);\r\n        const selectedSentence = availableSentences[randomIndex];\r\n\r\n        setRandomSentence(selectedSentence.sentence);\r\n        setRandomTranslation(selectedSentence.translation);\r\n        setShowTranslation(false);\r\n\r\n        // Убираем выбранное предложение из списка доступных и добавляем его в использованные\r\n        setAvailableSentences(prevSentences => prevSentences.filter(\r\n            (item, index) => index !== randomIndex\r\n        ));\r\n        setUsedSentences(prevUsed => [...prevUsed, selectedSentence]);\r\n    }, [availableSentences]);\r\n\r\n    useEffect(() => {\r\n        if (availableSentences.length > 0) {\r\n            getRandomSentence();\r\n        }\r\n    }, [getRandomSentence]);\r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true);\r\n    };\r\n\r\n    const startOver = () => {\r\n        // Сбрасываем состояние: доступные предложения возвращаются, сообщение и использованные предложения очищаются\r\n        setAvailableSentences(formData.flatMap(word => word.sentences));\r\n        setUsedSentences([]);\r\n        setMessage(\"\");\r\n        setRandomSentence(\"\");\r\n        setRandomTranslation(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className={startDictation.startDictation}>\r\n            {message ? (\r\n                <>\r\n                    <p>{message}</p>\r\n                    <button\r\n                        onClick={startOver}\r\n                        className={startDictation.startDictation__startOver}\r\n                    >\r\n                        Start over\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {randomSentence && <p>{randomSentence}</p>}\r\n                    {showTranslation && (\r\n                        <p className={startDictation.startDictation__translation}>\r\n                            {randomTranslation}\r\n                        </p>\r\n                    )}\r\n                    <div className={startDictation.startDictation__buttons}>\r\n                        <button\r\n                            onClick={handleShowTranslation}\r\n                            className={startDictation.startDictation__showTranslation}\r\n                        >\r\n                            Show translation\r\n                        </button>\r\n                        <button\r\n                            onClick={getRandomSentence}\r\n                            className={startDictation.startDictation__nextSentence}\r\n                        >\r\n                            Next sentence\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartDictation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}