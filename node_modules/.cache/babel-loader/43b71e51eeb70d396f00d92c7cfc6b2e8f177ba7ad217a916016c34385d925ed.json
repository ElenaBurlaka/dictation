{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import mywordspopup from './MyWordsPopup.module.css';\n// import close from './../../../../../src/images/close.png';\n\n// const MyWordsPopup = ({ onClose, addWord }) => {\n\n//     const [formData, setFormData] = useState({\n//         word: '',\n//         sentences: [{ sentence: '', translation: '' }]\n//     });\n\n//     const [publishedText, setPublishedText] = useState('')\n\n//     useEffect(() => {\n//         const savedText = localStorage.getItem('publishedText');\n//         if (savedText) {\n//             setPublishedText(JSON.parse(savedText))\n//         }\n//     }, [])\n\n//     const [errors, setErrors] = useState({\n//         word: \"Field can't be empty\",\n//         sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\n//     });\n\n//     const [dirtyFields, setDirtyFields] = useState({\n//         word: false,\n//         sentences: [{ sentence: false, translation: false }]\n//     });\n\n//     const [formValid, setFormValid] = useState(false);\n\n//     useEffect(() => {\n//         const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n//         setFormValid(!formHasErrors);\n//     }, [errors]);\n\n//     const handleInput = (e) => {\n//         const { name, value } = e.target;\n//         if (name === 'word') {\n//             setFormData(prevFormData => ({\n//                 ...prevFormData,\n//                 word: value\n//             }));\n//             setErrors(prevErrors => ({\n//                 ...prevErrors,\n//                 word: value ? '' : \"Field can't be empty\"\n//             }));\n//         } else {\n//             const [fieldType, index] = name.split('-');\n//             const idx = parseInt(index, 10);\n//             setFormData(prevFormData => {\n//                 const updatedSentences = prevFormData.sentences.map((sentence, i) => {\n//                     if (i === idx) {\n//                         return { ...sentence, [fieldType]: value };\n//                     }\n//                     return sentence;\n//                 });\n//                 return { ...prevFormData, sentences: updatedSentences };\n//             });\n//             setErrors(prevErrors => {\n//                 const updatedErrors = prevErrors.sentences.map((error, i) => {\n//                     if (i === idx) {\n//                         return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\n//                     }\n//                     return error;\n//                 });\n//                 return { ...prevErrors, sentences: updatedErrors };\n//             });\n//         }\n//     };\n\n//     const handlePublish = () => {\n//         setPublishedText(formData);\n//         localStorage.setItem('publishedText', JSON.stringify(formData))\n//         addWord(formData);\n//         setFormData({\n//             word: '',\n//             sentences: [{ sentence: '', translation: ''}]\n//         })\n//     }\n\n//     const blurHandler = (e) => {\n//         const { name } = e.target;\n//         if (name === 'word') {\n//             setDirtyFields(prevDirtyFields => ({\n//                 ...prevDirtyFields,\n//                 word: true\n//             }));\n//         } else {\n//             const [fieldType, index] = name.split('-');\n//             const idx = parseInt(index, 10);\n//             setDirtyFields(prevDirtyFields => {\n//                 const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\n//                     if (i === idx) {\n//                         return { ...dirty, [fieldType]: true };\n//                     }\n//                     return dirty;\n//                 });\n//                 return { ...prevDirtyFields, sentences: updatedDirtyFields };\n//             });\n//         }\n//     };\n\n//     const addField = () => {\n//         setFormData(prevFormData => ({\n//             ...prevFormData,\n//             sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\n//         }));\n//         setErrors(prevErrors => ({\n//             ...prevErrors,\n//             sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\n//         }));\n//         setDirtyFields(prevDirtyFields => ({\n//             ...prevDirtyFields,\n//             sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\n//         }));\n//     };\n\n//     const removeField = (index) => {\n//         if (formData.sentences.length > 1) {\n//             setFormData(prevFormData => ({\n//                 ...prevFormData,\n//                 sentences: prevFormData.sentences.filter((_, i) => i !== index)\n//             }));\n//             setErrors(prevErrors => ({\n//                 ...prevErrors,\n//                 sentences: prevErrors.sentences.filter((_, i) => i !== index)\n//             }));\n//             setDirtyFields(prevDirtyFields => ({\n//                 ...prevDirtyFields,\n//                 sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n//             }));\n//         }\n//     };\n\n//     return (\n//         <div className={mywordspopup.mywordspopup}>\n//             <div className={mywordspopup.mywordspopup__wrapper}>\n//                 <div className={mywordspopup.mywordspopup__content}>\n//                     <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\n//                     <div className={mywordspopup.mywordspopup__inputs}>\n//                         <input\n//                             onChange={handleInput}\n//                             onBlur={blurHandler}\n//                             name='word'\n//                             type='text'\n//                             placeholder='word'\n//                             value={formData.word}\n//                         />\n//                         {dirtyFields.word && errors.word && (\n//                             <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\n//                         )}\n//                         {formData.sentences.map((sentence, index) => (\n//                             <div key={index} style={{ display: 'flex' }}>\n//                                 <div className={mywordspopup.mywordspopup__inputs_repeated}>\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`sentence-${index}`}\n//                                         type='text'\n//                                         placeholder='sentence with word'\n//                                         value={sentence.sentence}\n//                                         data-index={index}\n//                                     />\n//                                     {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\n//                                     )}\n//                                     <input\n//                                         onChange={handleInput}\n//                                         onBlur={blurHandler}\n//                                         name={`translation-${index}`}\n//                                         type='text'\n//                                         placeholder='sentence translation'\n//                                         value={sentence.translation}\n//                                         data-index={index}\n//                                     />\n//                                     {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\n//                                     )}\n//                                 </div>\n//                                 {formData.sentences.length > 1 && (\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\n//                                 )}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <div className={mywordspopup.mywordspopup__buttons}>\n//                         <button onClick={addField}>add one more sentence</button>\n//                         <button onClick={handlePublish} disabled={!formValid}>done</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default MyWordsPopup;\n\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport close from './../../../../../src/images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = ({\n  onClose,\n  addWord,\n  filteredWords\n}) => {\n  _s();\n  const [word, setWord] = useState('');\n  const [sentences, setSentences] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [error, setError] = useState('');\n\n  // const [formData, setFormData] = useState({\n  //     word: '',\n  //     sentences: [{ sentence: '', translation: '' }]\n  // });\n\n  const [publishedText, setPublishedText] = useState('');\n  const handleAddWord = () => {\n    if (filteredWords.some(existingWord => existingWord.word.toLowerCase() === word.toLowerCase())) {\n      setError('Это слово уже существует.');\n    } else if (word.trim() === '') {\n      setError('Слово не может быть пустым.');\n    } else {\n      addWord({\n        word,\n        sentences\n      });\n      onClose();\n    }\n  };\n  const handleSentenceChange = (index, field, value) => {\n    const newSentences = [...sentences];\n    newSentences[index][field] = value;\n    setSentences(newSentences);\n  };\n  const addSentenceField = () => {\n    setSentences([...sentences, {\n      sentence: '',\n      translation: ''\n    }]);\n  };\n  const removeSentenceField = index => {\n    setSentences(sentences.filter((_, i) => i !== index));\n  };\n  useEffect(() => {\n    const savedText = localStorage.getItem('publishedText');\n    if (savedText) {\n      setPublishedText(JSON.parse(savedText));\n    }\n  }, []);\n  const [errors, setErrors] = useState({\n    word: \"Field can't be empty\",\n    sentences: [{\n      sentence: \"Field can't be empty\",\n      translation: \"Field can't be empty\"\n    }]\n  });\n  const [dirtyFields, setDirtyFields] = useState({\n    word: false,\n    sentences: [{\n      sentence: false,\n      translation: false\n    }]\n  });\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\n    setFormValid(!formHasErrors);\n  }, [errors]);\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'word') {\n      setSentences(prevFormData => ({\n        ...prevFormData,\n        word: value\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        word: value ? '' : \"Field can't be empty\"\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setSentences(prevFormData => {\n        const updatedSentences = prevFormData.sentences.map((sentence, i) => {\n          if (i === idx) {\n            return {\n              ...sentence,\n              [fieldType]: value\n            };\n          }\n          return sentence;\n        });\n        return {\n          ...prevFormData,\n          sentences: updatedSentences\n        };\n      });\n      setErrors(prevErrors => {\n        const updatedErrors = prevErrors.sentences.map((error, i) => {\n          if (i === idx) {\n            return {\n              ...error,\n              [fieldType]: value ? '' : \"Field can't be empty\"\n            };\n          }\n          return error;\n        });\n        return {\n          ...prevErrors,\n          sentences: updatedErrors\n        };\n      });\n    }\n  };\n  const handlePublish = () => {\n    setPublishedText(sentences);\n    localStorage.setItem('publishedText', JSON.stringify(sentences));\n    addWord(sentences);\n    setSentences({\n      word: '',\n      sentences: [{\n        sentence: '',\n        translation: ''\n      }]\n    });\n  };\n  const blurHandler = e => {\n    const {\n      name\n    } = e.target;\n    if (name === 'word') {\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        word: true\n      }));\n    } else {\n      const [fieldType, index] = name.split('-');\n      const idx = parseInt(index, 10);\n      setDirtyFields(prevDirtyFields => {\n        const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\n          if (i === idx) {\n            return {\n              ...dirty,\n              [fieldType]: true\n            };\n          }\n          return dirty;\n        });\n        return {\n          ...prevDirtyFields,\n          sentences: updatedDirtyFields\n        };\n      });\n    }\n  };\n  const addField = () => {\n    setSentences(prevFormData => ({\n      ...prevFormData,\n      sentences: [...prevFormData.sentences, {\n        sentence: '',\n        translation: ''\n      }]\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      sentences: [...prevErrors.sentences, {\n        sentence: \"Field can't be empty\",\n        translation: \"Field can't be empty\"\n      }]\n    }));\n    setDirtyFields(prevDirtyFields => ({\n      ...prevDirtyFields,\n      sentences: [...prevDirtyFields.sentences, {\n        sentence: false,\n        translation: false\n      }]\n    }));\n  };\n  const removeField = index => {\n    if (sentences.sentences.length > 1) {\n      setSentences(prevFormData => ({\n        ...prevFormData,\n        sentences: prevFormData.sentences.filter((_, i) => i !== index)\n      }));\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        sentences: prevErrors.sentences.filter((_, i) => i !== index)\n      }));\n      setDirtyFields(prevDirtyFields => ({\n        ...prevDirtyFields,\n        sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: mywordspopup.mywordspopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 100\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            // onChange={handleInput}\n            onChange: e => setWord(e.target.value),\n            onBlur: blurHandler,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: sentences.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 25\n          }, this), dirtyFields.word && errors.word && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: errors.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 29\n          }, this), sentences.sentences.map((sentence, index) => {\n            var _dirtyFields$sentence, _errors$sentences$ind, _dirtyFields$sentence2, _errors$sentences$ind2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: mywordspopup.mywordspopup__inputs_repeated,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  // onChange={handleInput}\n                  onChange: e => handleSentenceChange(index, 'sentence', e.target.value),\n                  onBlur: blurHandler,\n                  name: `sentence-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence with word\",\n                  value: sentence.sentence,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence = dirtyFields.sentences[index]) === null || _dirtyFields$sentence === void 0 ? void 0 : _dirtyFields$sentence.sentence) && ((_errors$sentences$ind = errors.sentences[index]) === null || _errors$sentences$ind === void 0 ? void 0 : _errors$sentences$ind.sentence) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].sentence\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  // onChange={handleInput}\n                  onChange: e => handleSentenceChange(index, 'translation', e.target.value),\n                  onBlur: blurHandler,\n                  name: `translation-${index}`,\n                  type: \"text\",\n                  placeholder: \"sentence translation\",\n                  value: sentence.translation,\n                  \"data-index\": index\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 37\n                }, this), ((_dirtyFields$sentence2 = dirtyFields.sentences[index]) === null || _dirtyFields$sentence2 === void 0 ? void 0 : _dirtyFields$sentence2.translation) && ((_errors$sentences$ind2 = errors.sentences[index]) === null || _errors$sentences$ind2 === void 0 ? void 0 : _errors$sentences$ind2.translation) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red',\n                    fontSize: '12px'\n                  },\n                  children: errors.sentences[index].translation\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this), sentences.sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  cursor: 'pointer',\n                  marginLeft: '10px'\n                },\n                onClick: () => removeField(index),\n                children: \"\\u2013\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 29\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addSentenceField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddWord,\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"nrYK/+HuyVLz2lR5CttozRq9xxM=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","close","jsxDEV","_jsxDEV","MyWordsPopup","onClose","addWord","filteredWords","_s","word","setWord","sentences","setSentences","sentence","translation","error","setError","publishedText","setPublishedText","handleAddWord","some","existingWord","toLowerCase","trim","handleSentenceChange","index","field","value","newSentences","addSentenceField","removeSentenceField","filter","_","i","savedText","localStorage","getItem","JSON","parse","errors","setErrors","dirtyFields","setDirtyFields","formValid","setFormValid","formHasErrors","e","handleInput","name","target","prevFormData","prevErrors","fieldType","split","idx","parseInt","updatedSentences","map","updatedErrors","handlePublish","setItem","stringify","blurHandler","prevDirtyFields","updatedDirtyFields","dirty","addField","removeField","length","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mywordspopup__inputs","onChange","onBlur","type","placeholder","style","color","fontSize","_dirtyFields$sentence","_errors$sentences$ind","_dirtyFields$sentence2","_errors$sentences$ind2","display","mywordspopup__inputs_repeated","cursor","marginLeft","mywordspopup__buttons","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import mywordspopup from './MyWordsPopup.module.css';\r\n// import close from './../../../../../src/images/close.png';\r\n\r\n// const MyWordsPopup = ({ onClose, addWord }) => {\r\n\r\n//     const [formData, setFormData] = useState({\r\n//         word: '',\r\n//         sentences: [{ sentence: '', translation: '' }]\r\n//     });\r\n\r\n//     const [publishedText, setPublishedText] = useState('')\r\n\r\n//     useEffect(() => {\r\n//         const savedText = localStorage.getItem('publishedText');\r\n//         if (savedText) {\r\n//             setPublishedText(JSON.parse(savedText))\r\n//         }\r\n//     }, [])\r\n\r\n//     const [errors, setErrors] = useState({\r\n//         word: \"Field can't be empty\",\r\n//         sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n//     });\r\n\r\n//     const [dirtyFields, setDirtyFields] = useState({\r\n//         word: false,\r\n//         sentences: [{ sentence: false, translation: false }]\r\n//     });\r\n\r\n//     const [formValid, setFormValid] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n//         setFormValid(!formHasErrors);\r\n//     }, [errors]);\r\n\r\n//     const handleInput = (e) => {\r\n//         const { name, value } = e.target;\r\n//         if (name === 'word') {\r\n//             setFormData(prevFormData => ({\r\n//                 ...prevFormData,\r\n//                 word: value\r\n//             }));\r\n//             setErrors(prevErrors => ({\r\n//                 ...prevErrors,\r\n//                 word: value ? '' : \"Field can't be empty\"\r\n//             }));\r\n//         } else {\r\n//             const [fieldType, index] = name.split('-');\r\n//             const idx = parseInt(index, 10);\r\n//             setFormData(prevFormData => {\r\n//                 const updatedSentences = prevFormData.sentences.map((sentence, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...sentence, [fieldType]: value };\r\n//                     }\r\n//                     return sentence;\r\n//                 });\r\n//                 return { ...prevFormData, sentences: updatedSentences };\r\n//             });\r\n//             setErrors(prevErrors => {\r\n//                 const updatedErrors = prevErrors.sentences.map((error, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\r\n//                     }\r\n//                     return error;\r\n//                 });\r\n//                 return { ...prevErrors, sentences: updatedErrors };\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handlePublish = () => {\r\n//         setPublishedText(formData);\r\n//         localStorage.setItem('publishedText', JSON.stringify(formData))\r\n//         addWord(formData);\r\n//         setFormData({\r\n//             word: '',\r\n//             sentences: [{ sentence: '', translation: ''}]\r\n//         })\r\n//     }\r\n\r\n//     const blurHandler = (e) => {\r\n//         const { name } = e.target;\r\n//         if (name === 'word') {\r\n//             setDirtyFields(prevDirtyFields => ({\r\n//                 ...prevDirtyFields,\r\n//                 word: true\r\n//             }));\r\n//         } else {\r\n//             const [fieldType, index] = name.split('-');\r\n//             const idx = parseInt(index, 10);\r\n//             setDirtyFields(prevDirtyFields => {\r\n//                 const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\r\n//                     if (i === idx) {\r\n//                         return { ...dirty, [fieldType]: true };\r\n//                     }\r\n//                     return dirty;\r\n//                 });\r\n//                 return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const addField = () => {\r\n//         setFormData(prevFormData => ({\r\n//             ...prevFormData,\r\n//             sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n//         }));\r\n//         setErrors(prevErrors => ({\r\n//             ...prevErrors,\r\n//             sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n//         }));\r\n//         setDirtyFields(prevDirtyFields => ({\r\n//             ...prevDirtyFields,\r\n//             sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n//         }));\r\n//     };\r\n\r\n//     const removeField = (index) => {\r\n//         if (formData.sentences.length > 1) {\r\n//             setFormData(prevFormData => ({\r\n//                 ...prevFormData,\r\n//                 sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//             setErrors(prevErrors => ({\r\n//                 ...prevErrors,\r\n//                 sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//             setDirtyFields(prevDirtyFields => ({\r\n//                 ...prevDirtyFields,\r\n//                 sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className={mywordspopup.mywordspopup}>\r\n//             <div className={mywordspopup.mywordspopup__wrapper}>\r\n//                 <div className={mywordspopup.mywordspopup__content}>\r\n//                     <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n//                     <div className={mywordspopup.mywordspopup__inputs}>\r\n//                         <input\r\n//                             onChange={handleInput}\r\n//                             onBlur={blurHandler}\r\n//                             name='word'\r\n//                             type='text'\r\n//                             placeholder='word'\r\n//                             value={formData.word}\r\n//                         />\r\n//                         {dirtyFields.word && errors.word && (\r\n//                             <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n//                         )}\r\n//                         {formData.sentences.map((sentence, index) => (\r\n//                             <div key={index} style={{ display: 'flex' }}>\r\n//                                 <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`sentence-${index}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence with word'\r\n//                                         value={sentence.sentence}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                     {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\r\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n//                                     )}\r\n//                                     <input\r\n//                                         onChange={handleInput}\r\n//                                         onBlur={blurHandler}\r\n//                                         name={`translation-${index}`}\r\n//                                         type='text'\r\n//                                         placeholder='sentence translation'\r\n//                                         value={sentence.translation}\r\n//                                         data-index={index}\r\n//                                     />\r\n//                                     {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\r\n//                                         <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n//                                     )}\r\n//                                 </div>\r\n//                                 {formData.sentences.length > 1 && (\r\n//                                     <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n//                                 )}\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                     <div className={mywordspopup.mywordspopup__buttons}>\r\n//                         <button onClick={addField}>add one more sentence</button>\r\n//                         <button onClick={handlePublish} disabled={!formValid}>done</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MyWordsPopup;\r\n\r\n\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\nimport close from './../../../../../src/images/close.png';\r\n\r\nconst MyWordsPopup = ({ onClose, addWord, filteredWords }) => {\r\n    const [word, setWord] = useState('');\r\n\r\n    const [sentences, setSentences] = useState({\r\n        word: '', \r\n        sentences: [{ sentence: '', translation: '' }]});\r\n\r\n    const [error, setError] = useState('');\r\n\r\n    // const [formData, setFormData] = useState({\r\n    //     word: '',\r\n    //     sentences: [{ sentence: '', translation: '' }]\r\n    // });\r\n\r\n    const [publishedText, setPublishedText] = useState('')\r\n\r\n    const handleAddWord = () => {\r\n        if (filteredWords.some(existingWord => existingWord.word.toLowerCase() === word.toLowerCase())) {\r\n            setError('Это слово уже существует.');\r\n        } else if (word.trim() === '') {\r\n            setError('Слово не может быть пустым.');\r\n        } else {\r\n            addWord({ word, sentences });\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const handleSentenceChange = (index, field, value) => {\r\n        const newSentences = [...sentences];\r\n        newSentences[index][field] = value;\r\n        setSentences(newSentences);\r\n    };\r\n\r\n    const addSentenceField = () => {\r\n        setSentences([...sentences, { sentence: '', translation: '' }]);\r\n    };\r\n\r\n    const removeSentenceField = (index) => {\r\n        setSentences(sentences.filter((_, i) => i !== index));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const savedText = localStorage.getItem('publishedText');\r\n        if (savedText) {\r\n            setPublishedText(JSON.parse(savedText))\r\n        }\r\n    }, [])\r\n\r\n    const [errors, setErrors] = useState({\r\n        word: \"Field can't be empty\",\r\n        sentences: [{ sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n    });\r\n\r\n    const [dirtyFields, setDirtyFields] = useState({\r\n        word: false,\r\n        sentences: [{ sentence: false, translation: false }]\r\n    });\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = errors.word || errors.sentences.some(e => e.sentence || e.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [errors]);\r\n\r\n    const handleInput = (e) => {\r\n        const { name, value } = e.target;\r\n        if (name === 'word') {\r\n            setSentences(prevFormData => ({\r\n                ...prevFormData,\r\n                word: value\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                word: value ? '' : \"Field can't be empty\"\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setSentences(prevFormData => {\r\n                const updatedSentences = prevFormData.sentences.map((sentence, i) => {\r\n                    if (i === idx) {\r\n                        return { ...sentence, [fieldType]: value };\r\n                    }\r\n                    return sentence;\r\n                });\r\n                return { ...prevFormData, sentences: updatedSentences };\r\n            });\r\n            setErrors(prevErrors => {\r\n                const updatedErrors = prevErrors.sentences.map((error, i) => {\r\n                    if (i === idx) {\r\n                        return { ...error, [fieldType]: value ? '' : \"Field can't be empty\" };\r\n                    }\r\n                    return error;\r\n                });\r\n                return { ...prevErrors, sentences: updatedErrors };\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePublish = () => {\r\n        setPublishedText(sentences);\r\n        localStorage.setItem('publishedText', JSON.stringify(sentences))\r\n        addWord(sentences);\r\n        setSentences({\r\n            word: '',\r\n            sentences: [{ sentence: '', translation: ''}]\r\n        })\r\n    }\r\n\r\n    const blurHandler = (e) => {\r\n        const { name } = e.target;\r\n        if (name === 'word') {\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                word: true\r\n            }));\r\n        } else {\r\n            const [fieldType, index] = name.split('-');\r\n            const idx = parseInt(index, 10);\r\n            setDirtyFields(prevDirtyFields => {\r\n                const updatedDirtyFields = prevDirtyFields.sentences.map((dirty, i) => {\r\n                    if (i === idx) {\r\n                        return { ...dirty, [fieldType]: true };\r\n                    }\r\n                    return dirty;\r\n                });\r\n                return { ...prevDirtyFields, sentences: updatedDirtyFields };\r\n            });\r\n        }\r\n    };\r\n\r\n    const addField = () => {\r\n        setSentences(prevFormData => ({\r\n            ...prevFormData,\r\n            sentences: [...prevFormData.sentences, { sentence: '', translation: '' }]\r\n        }));\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            sentences: [...prevErrors.sentences, { sentence: \"Field can't be empty\", translation: \"Field can't be empty\" }]\r\n        }));\r\n        setDirtyFields(prevDirtyFields => ({\r\n            ...prevDirtyFields,\r\n            sentences: [...prevDirtyFields.sentences, { sentence: false, translation: false }]\r\n        }));\r\n    };\r\n\r\n    const removeField = (index) => {\r\n        if (sentences.sentences.length > 1) {\r\n            setSentences(prevFormData => ({\r\n                ...prevFormData,\r\n                sentences: prevFormData.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setErrors(prevErrors => ({\r\n                ...prevErrors,\r\n                sentences: prevErrors.sentences.filter((_, i) => i !== index)\r\n            }));\r\n            setDirtyFields(prevDirtyFields => ({\r\n                ...prevDirtyFields,\r\n                sentences: prevDirtyFields.sentences.filter((_, i) => i !== index)\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}><img src={close} alt='Close' /></button>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            // onChange={handleInput}\r\n                            onChange={(e) => setWord(e.target.value)}\r\n                            onBlur={blurHandler}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={sentences.word}\r\n                        />\r\n                        {dirtyFields.word && errors.word && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{errors.word}</div>\r\n                        )}\r\n                        {sentences.sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        // onChange={handleInput}\r\n                                        onChange={(e) => handleSentenceChange(index, 'sentence', e.target.value)}\r\n                                        onBlur={blurHandler}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.sentence && errors.sentences[index]?.sentence && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].sentence}</div>\r\n                                    )}\r\n                                    <input\r\n                                        // onChange={handleInput}\r\n                                        onChange={(e) => handleSentenceChange(index, 'translation', e.target.value)}\r\n                                        onBlur={blurHandler}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                        data-index={index}\r\n                                    />\r\n                                    {dirtyFields.sentences[index]?.translation && errors.sentences[index]?.translation && (\r\n                                        <div style={{ color: 'red', fontSize: '12px' }}>{errors.sentences[index].translation}</div>\r\n                                    )}\r\n                                </div>\r\n                                {sentences.sentences.length > 1 && (\r\n                                    <span style={{ cursor: 'pointer', marginLeft: '10px' }} onClick={() => removeField(index)}>–</span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button onClick={addSentenceField}>add one more sentence</button>\r\n                        {/* {error && <p className={styles.error}>{error}</p>} */}\r\n                        <button onClick={handleAddWord} disabled={!formValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWordsPopup;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}