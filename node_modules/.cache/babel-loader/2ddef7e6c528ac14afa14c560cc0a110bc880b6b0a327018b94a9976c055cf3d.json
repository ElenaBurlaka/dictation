{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport close from './../../../../../src/images/close.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = ({\n  onClose,\n  addWord,\n  filteredWords\n}) => {\n  _s();\n  const [word, setWord] = useState('');\n  const [sentences, setSentences] = useState([{\n    sentence: '',\n    translation: ''\n  }]);\n  const [error, setError] = useState('');\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    const formHasErrors = error !== '' || sentences.some(s => !s.sentence || !s.translation);\n    setFormValid(!formHasErrors);\n  }, [error, sentences]);\n  const handleAddWord = () => {\n    if (filteredWords.some(existingWord => existingWord.word.toLowerCase() === word.toLowerCase())) {\n      setError('This word already exists');\n    } else if (word.trim() === '') {\n      setError(\"Field can't be empty\");\n    } else {\n      addWord({\n        word,\n        sentences\n      });\n      onClose();\n    }\n  };\n  const handleSentenceChange = (index, field, value) => {\n    const newSentences = [...sentences];\n    newSentences[index][field] = value;\n    setSentences(newSentences);\n  };\n  const addSentenceField = () => {\n    setSentences([...sentences, {\n      sentence: '',\n      translation: ''\n    }]);\n  };\n  const removeSentenceField = index => {\n    setSentences(sentences.filter((_, i) => i !== index));\n  };\n\n  // const handleBlur = () => {\n  //     if (word.trim() === '') {\n  //         setError(\"Field can't be empty\");\n  //     } else if {\n  //         (sentence.trim() === '') {\n  //             setError(\"Field can't be empty\")\n  //         }\n  //     }\n  //     } else {\n  //         setError('');\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: mywordspopup.mywordspopup__content_close,\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: close,\n            alt: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setWord(e.target.value),\n            onBlur: handleAddWord,\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\",\n            value: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red',\n              fontSize: '12px'\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), sentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: mywordspopup.mywordspopup__inputs_repeated,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleSentenceChange(index, 'sentence', e.target.value)\n                // onBlur={handleBlur}\n                ,\n                name: `sentence-${index}`,\n                type: \"text\",\n                placeholder: \"sentence with word\",\n                value: sentence.sentence\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => handleSentenceChange(index, 'translation', e.target.value)\n                // onBlur={handleBlur}\n                ,\n                name: `translation-${index}`,\n                type: \"text\",\n                placeholder: \"sentence translation\",\n                value: sentence.translation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), sentences.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                marginLeft: '10px'\n              },\n              onClick: () => removeSentenceField(index),\n              children: \"\\u2013\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container__buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addSentenceField,\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddWord,\n            disabled: !formValid,\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"3OUyidzKX9EeAfGoj0nmJeBAjlY=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","close","jsxDEV","_jsxDEV","MyWordsPopup","onClose","addWord","filteredWords","_s","word","setWord","sentences","setSentences","sentence","translation","error","setError","formValid","setFormValid","formHasErrors","some","s","handleAddWord","existingWord","toLowerCase","trim","handleSentenceChange","index","field","value","newSentences","addSentenceField","removeSentenceField","filter","_","i","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__content_close","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mywordspopup__inputs","onChange","e","target","onBlur","name","type","placeholder","style","color","fontSize","map","display","mywordspopup__inputs_repeated","length","cursor","marginLeft","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css';\r\nimport close from './../../../../../src/images/close.png';\r\n\r\nconst MyWordsPopup = ({ onClose, addWord, filteredWords }) => {\r\n    const [word, setWord] = useState('');\r\n    const [sentences, setSentences] = useState([{ sentence: '', translation: '' }]);\r\n    const [error, setError] = useState('');\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const formHasErrors = error !== '' || sentences.some(s => !s.sentence || !s.translation);\r\n        setFormValid(!formHasErrors);\r\n    }, [error, sentences]);\r\n\r\n    const handleAddWord = () => {\r\n        if (filteredWords.some(existingWord => existingWord.word.toLowerCase() === word.toLowerCase())) {\r\n            setError('This word already exists');\r\n        } else if (word.trim() === '') {\r\n            setError(\"Field can't be empty\");\r\n        } else {\r\n            addWord({ word, sentences });\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const handleSentenceChange = (index, field, value) => {\r\n        const newSentences = [...sentences];\r\n        newSentences[index][field] = value;\r\n        setSentences(newSentences);\r\n    };\r\n\r\n    const addSentenceField = () => {\r\n        setSentences([...sentences, { sentence: '', translation: '' }]);\r\n    };\r\n\r\n    const removeSentenceField = (index) => {\r\n        setSentences(sentences.filter((_, i) => i !== index));\r\n    };\r\n\r\n    // const handleBlur = () => {\r\n    //     if (word.trim() === '') {\r\n    //         setError(\"Field can't be empty\");\r\n    //     } else if {\r\n    //         (sentence.trim() === '') {\r\n    //             setError(\"Field can't be empty\")\r\n    //         }\r\n    //     }\r\n    //     } else {\r\n    //         setError('');\r\n    //     }\r\n    // };\r\n\r\n    return (\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <button className={mywordspopup.mywordspopup__content_close} onClick={onClose}>\r\n                        <img src={close} alt='Close' />\r\n                    </button>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input\r\n                            onChange={(e) => setWord(e.target.value)}\r\n                            onBlur={handleAddWord}\r\n                            name='word'\r\n                            type='text'\r\n                            placeholder='word'\r\n                            value={word}\r\n                        />\r\n                        {error && (\r\n                            <div style={{ color: 'red', fontSize: '12px' }}>{error}</div>\r\n                        )}\r\n                        {sentences.map((sentence, index) => (\r\n                            <div key={index} style={{ display: 'flex' }}>\r\n                                <div className={mywordspopup.mywordspopup__inputs_repeated}>\r\n                                    <input\r\n                                        onChange={(e) => handleSentenceChange(index, 'sentence', e.target.value)}\r\n                                        // onBlur={handleBlur}\r\n                                        name={`sentence-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence with word'\r\n                                        value={sentence.sentence}\r\n                                    />\r\n                                    <input\r\n                                        onChange={(e) => handleSentenceChange(index, 'translation', e.target.value)}\r\n                                        // onBlur={handleBlur}\r\n                                        name={`translation-${index}`}\r\n                                        type='text'\r\n                                        placeholder='sentence translation'\r\n                                        value={sentence.translation}\r\n                                    />\r\n                                </div>\r\n                                {sentences.length > 1 && (\r\n                                    <span\r\n                                        style={{ cursor: 'pointer', marginLeft: '10px' }}\r\n                                        onClick={() => removeSentenceField(index)}\r\n                                    >\r\n                                        –\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className='container__buttons'>\r\n                        <button onClick={addSentenceField}>add one more sentence</button>\r\n                        <div></div>\r\n                        <button onClick={handleAddWord} disabled={!formValid}>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWordsPopup;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}