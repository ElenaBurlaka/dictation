{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\dictation\\\\french-app\\\\src\\\\components\\\\Content\\\\Dictation\\\\StartDictation\\\\StartDictation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport startDictation from './StartDictation.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StartDictation = ({\n  formData\n}) => {\n  _s();\n  const [randomTranslation, setRandomTranslation] = useState('');\n  const [randomSentence, setRandomSentence] = useState('');\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [availableSentence, setAvailableSentence] = useState(word.sentences);\n  const [message, setMessage] = useState(\"\");\n  // const [isTranslationShown, setIsTranslationShown] = useState(false)\n\n  const getRandomSentence = useCallback(() => {\n    if (availableSentence.length === 0) {\n      setMessage(\"You checked all the sentences\");\n      return;\n    } else if (formData && formData.length > 0) {\n      const allSentences = formData.flatMap(word => word.sentences);\n      const randomIndex = Math.floor(Math.random() * allSentences.length);\n      const selectedSentence = allSentences[randomIndex];\n      setRandomSentence(selectedSentence.translation);\n      setRandomTranslation(selectedSentence.sentence);\n      setShowTranslation(false);\n    } else {\n      console.error('formData is undefined or empty');\n    }\n  }, [formData]);\n  const handleShowTranslation = () => {\n    setShowTranslation(true);\n  };\n  useEffect(() => {\n    getRandomSentence();\n  }, [formData, getRandomSentence]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: startDictation.startDictation,\n    children: [randomSentence && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: randomSentence\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: startDictation.startDictation__translation,\n      children: randomTranslation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: startDictation.startDictation__buttons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShowTranslation,\n        className: startDictation.startDictation__showTranslation,\n        children: \"Show translation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getRandomSentence,\n        className: startDictation.startDictation__nextSentence,\n        children: \"Next sentence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(StartDictation, \"5nkx298oabMCyQHz0PDqYnsBYk8=\");\n_c = StartDictation;\nexport default StartDictation;\nvar _c;\n$RefreshReg$(_c, \"StartDictation\");","map":{"version":3,"names":["useEffect","useState","useCallback","startDictation","jsxDEV","_jsxDEV","StartDictation","formData","_s","randomTranslation","setRandomTranslation","randomSentence","setRandomSentence","showTranslation","setShowTranslation","availableSentence","setAvailableSentence","word","sentences","message","setMessage","getRandomSentence","length","allSentences","flatMap","randomIndex","Math","floor","random","selectedSentence","translation","sentence","console","error","handleShowTranslation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startDictation__translation","startDictation__buttons","onClick","startDictation__showTranslation","startDictation__nextSentence","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/dictation/french-app/src/components/Content/Dictation/StartDictation/StartDictation.jsx"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport startDictation from './StartDictation.module.css'\r\n\r\nconst StartDictation = ({ formData }) => {\r\n\r\n    const [randomTranslation, setRandomTranslation] = useState('')\r\n    const [randomSentence, setRandomSentence] = useState('')\r\n    const [showTranslation, setShowTranslation] = useState(false)\r\n    const [availableSentence, setAvailableSentence] = useState(word.sentences)\r\n    const [message, setMessage] = useState(\"\");\r\n    // const [isTranslationShown, setIsTranslationShown] = useState(false)\r\n\r\n    const getRandomSentence = useCallback(() => {\r\n        if (availableSentence.length === 0) {\r\n            setMessage(\"You checked all the sentences\")\r\n            return;\r\n        } else if (formData && formData.length > 0) {\r\n            const allSentences = formData.flatMap(word => word.sentences)\r\n            const randomIndex = Math.floor(Math.random() * allSentences.length);\r\n            const selectedSentence = allSentences[randomIndex]\r\n            setRandomSentence(selectedSentence.translation)\r\n            setRandomTranslation(selectedSentence.sentence)\r\n            setShowTranslation(false)\r\n        } else {\r\n            console.error('formData is undefined or empty')\r\n        }\r\n    }, [formData])\r\n\r\n    const handleShowTranslation = () => {\r\n        setShowTranslation(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRandomSentence()\r\n    }, [formData, getRandomSentence])\r\n\r\n    return(\r\n        <div className={startDictation.startDictation}>\r\n            {randomSentence && <p>{randomSentence}</p>}\r\n            {showTranslation && <p className={startDictation.startDictation__translation}>{randomTranslation}</p>}\r\n            <div className={startDictation.startDictation__buttons}>\r\n                <button onClick={handleShowTranslation} className={startDictation.startDictation__showTranslation}>Show translation</button>\r\n                <button onClick={getRandomSentence} className={startDictation.startDictation__nextSentence}>Next sentence</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartDictation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}