{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Helen\\\\Desktop\\\\dev\\\\french-app\\\\src\\\\components\\\\Content\\\\MyWords\\\\MyWordsPopup\\\\MyWordsPopup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport mywordspopup from './MyWordsPopup.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyWordsPopup = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    word: '',\n    sentences: [{\n      sentence: '',\n      translation: ''\n    }]\n  });\n  const [field, setField] = useState('');\n  const [fieldEmpty, setFieldEmpty] = useState(\"Field can't be empty\");\n  const [fieldDirty, setFieldDirty] = useState(false);\n  const [formValid, setFormValid] = useState(false);\n  useEffect(() => {\n    if (fieldEmpty) {\n      setFormValid(false);\n    } else {\n      setFormValid(true);\n    }\n  }, [fieldEmpty]);\n\n  // function handleChange(event) {\n  //     const {name, value, type} = event.target;\n  //     setFormData((prevFormData) => ({\n  //         ...prevFormData,\n  //     }))\n  // }\n\n  function handleInput(event) {\n    setField(event.target.value);\n    if (formData.word === '') {\n      setFieldEmpty(\"Field can't be empty\");\n    } else setFieldEmpty('');\n  }\n  const blurHandler = e => {\n    switch (e.target.name) {\n      case 'word':\n        setFieldDirty(true);\n        break;\n      case 'sentence':\n        setFieldDirty(true);\n        break;\n      case 'translation':\n        setFieldDirty(true);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mywordspopup.mywordspopup,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mywordspopup.mywordspopup__wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mywordspopup.mywordspopup__content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__inputs,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: event => handleInput(event),\n            name: \"word\",\n            type: \"text\",\n            placeholder: \"word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 56\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: event => handleInput(event),\n            name: \"sentence\",\n            type: \"text\",\n            placeholder: \"sentence with word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 56\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: event => handleInput(event),\n            name: \"translation\",\n            type: \"text\",\n            placeholder: \"sentence translation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), fieldDirty && fieldEmpty && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: fieldEmpty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 56\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mywordspopup.mywordspopup__buttons,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"add one more sentence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(MyWordsPopup, \"/rX+DOHpmAwdkMjQqhvp6gXC0HM=\");\n_c = MyWordsPopup;\nexport default MyWordsPopup;\nvar _c;\n$RefreshReg$(_c, \"MyWordsPopup\");","map":{"version":3,"names":["useEffect","useState","mywordspopup","jsxDEV","_jsxDEV","MyWordsPopup","_s","formData","setFormData","word","sentences","sentence","translation","field","setField","fieldEmpty","setFieldEmpty","fieldDirty","setFieldDirty","formValid","setFormValid","handleInput","event","target","value","blurHandler","e","name","className","children","mywordspopup__wrapper","mywordspopup__content","mywordspopup__inputs","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","mywordspopup__buttons","_c","$RefreshReg$"],"sources":["C:/Users/Helen/Desktop/dev/french-app/src/components/Content/MyWords/MyWordsPopup/MyWordsPopup.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport mywordspopup from './MyWordsPopup.module.css'\r\n\r\nconst MyWordsPopup = () => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        word: '',\r\n        sentences: [\r\n            {\r\n                sentence: '',\r\n                translation: ''\r\n            }\r\n        ]\r\n    })\r\n\r\n    const [field, setField] = useState('')\r\n    const [fieldEmpty, setFieldEmpty] = useState(\"Field can't be empty\");\r\n    const [fieldDirty, setFieldDirty] = useState(false)\r\n    const [formValid, setFormValid] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (fieldEmpty) {\r\n            setFormValid(false)\r\n        }else {\r\n            setFormValid(true)\r\n        }\r\n    }, [fieldEmpty])\r\n\r\n    // function handleChange(event) {\r\n    //     const {name, value, type} = event.target;\r\n    //     setFormData((prevFormData) => ({\r\n    //         ...prevFormData,\r\n    //     }))\r\n    // }\r\n\r\n    function handleInput(event) {\r\n        setField(event.target.value)\r\n        if (formData.word === '') {\r\n            setFieldEmpty(\"Field can't be empty\")\r\n        } else (\r\n            setFieldEmpty('')\r\n        )\r\n    }\r\n\r\n    const blurHandler = (e) => {\r\n        switch (e.target.name) {\r\n            case 'word':\r\n                setFieldDirty(true)\r\n                break\r\n            case 'sentence':\r\n                setFieldDirty(true)\r\n                break\r\n            case 'translation':\r\n                setFieldDirty(true)\r\n                break\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={mywordspopup.mywordspopup}>\r\n            <div className={mywordspopup.mywordspopup__wrapper}>\r\n                <div className={mywordspopup.mywordspopup__content}>\r\n                    <div className={mywordspopup.mywordspopup__inputs}>\r\n                        <input onChange={event => handleInput(event)} name='word' type='text' placeholder='word'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                        <input onChange={event => handleInput(event)} name='sentence' type='text' placeholder='sentence with word'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                        <input onChange={event => handleInput(event)} name='translation' type='text' placeholder='sentence translation'></input>\r\n                        {(fieldDirty && fieldEmpty) && <div style={{color: 'red'}}>{fieldEmpty}</div>}\r\n                    </div>\r\n                    <div className={mywordspopup.mywordspopup__buttons}>\r\n                        <button>add one more sentence</button>\r\n                        <button>done</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyWordsPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}